"""
–ü—Ä–æ—Å—Ç–∞—è –≤–µ–±-–ø–∞–Ω–µ–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–æ—Ç–∞.
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –∏ –º–µ—Ç—Ä–∏–∫.
"""

import asyncio
import json
import os
from datetime import datetime, timedelta
from pathlib import Path
from aiohttp import web, WSMsgType
import aiohttp_jinja2
import jinja2
import logging
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class MonitoringDashboard:
    """–í–µ–±-–ø–∞–Ω–µ–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    
    def __init__(self, port=8080):
        self.port = port
        self.app = web.Application()
        self.websockets = set()
        self.setup_routes()
        self.setup_templates()
    
    def setup_templates(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤."""
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
        templates_dir = Path(__file__).parent / 'templates'
        templates_dir.mkdir(exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Jinja2
        aiohttp_jinja2.setup(
            self.app,
            loader=jinja2.FileSystemLoader(str(templates_dir))
        )
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —à–∞–±–ª–æ–Ω –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        self.create_templates()
    
    def create_templates(self):
        """–°–æ–∑–¥–∞–µ—Ç HTML —à–∞–±–ª–æ–Ω—ã."""
        templates_dir = Path(__file__).parent / 'templates'
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —à–∞–±–ª–æ–Ω –ø–∞–Ω–µ–ª–∏
        dashboard_html = '''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Team Bot</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f5f7fa;
            color: #333;
            line-height: 1.6;
        }
        
        .header {
            background: #2c3e50;
            color: white;
            padding: 1rem 2rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .header h1 {
            font-size: 1.5rem;
            font-weight: 600;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }
        
        .grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
            margin-bottom: 2rem;
        }
        
        .card {
            background: white;
            border-radius: 8px;
            padding: 1.5rem;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            border-left: 4px solid #3498db;
        }
        
        .card.warning {
            border-left-color: #f39c12;
        }
        
        .card.critical {
            border-left-color: #e74c3c;
        }
        
        .card.healthy {
            border-left-color: #27ae60;
        }
        
        .card-title {
            font-size: 1.1rem;
            font-weight: 600;
            margin-bottom: 1rem;
            color: #2c3e50;
        }
        
        .metric {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.5rem 0;
            border-bottom: 1px solid #ecf0f1;
        }
        
        .metric:last-child {
            border-bottom: none;
        }
        
        .metric-label {
            color: #7f8c8d;
        }
        
        .metric-value {
            font-weight: 600;
            color: #2c3e50;
        }
        
        .status-badge {
            display: inline-block;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 0.8rem;
            font-weight: 600;
            text-transform: uppercase;
        }
        
        .status-healthy {
            background: #d5f4e6;
            color: #27ae60;
        }
        
        .status-warning {
            background: #fef9e7;
            color: #f39c12;
        }
        
        .status-critical {
            background: #fadbd8;
            color: #e74c3c;
        }
        
        .logs-container {
            background: white;
            border-radius: 8px;
            padding: 1.5rem;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            margin-top: 2rem;
        }
        
        .logs-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }
        
        .logs-content {
            background: #2c3e50;
            color: #ecf0f1;
            padding: 1rem;
            border-radius: 4px;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-size: 0.9rem;
            height: 400px;
            overflow-y: auto;
            white-space: pre-wrap;
        }
        
        .refresh-btn {
            background: #3498db;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9rem;
        }
        
        .refresh-btn:hover {
            background: #2980b9;
        }
        
        .auto-refresh {
            font-size: 0.8rem;
            color: #7f8c8d;
            margin-left: 1rem;
        }
        
        .error { color: #e74c3c; }
        .warning { color: #f39c12; }
        .info { color: #3498db; }
        .debug { color: #95a5a6; }
        
        @media (max-width: 768px) {
            .container {
                padding: 1rem;
            }
            
            .grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>ü§ñ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Team Bot</h1>
    </div>
    
    <div class="container">
        <!-- –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å -->
        <div class="grid">
            <div class="card {{ overall_status }}">
                <div class="card-title">üè• –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ</div>
                <div class="metric">
                    <span class="metric-label">–°—Ç–∞—Ç—É—Å:</span>
                    <span class="status-badge status-{{ overall_status }}">{{ overall_status }}</span>
                </div>
                <div class="metric">
                    <span class="metric-label">–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</span>
                    <span class="metric-value">{{ last_check }}</span>
                </div>
            </div>
            
            <!-- –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ -->
            <div class="card">
                <div class="card-title">üìä –ú–µ—Ç—Ä–∏–∫–∏</div>
                <div class="metric">
                    <span class="metric-label">–°–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</span>
                    <span class="metric-value">{{ metrics.messages_processed or 0 }}</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Callback'–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</span>
                    <span class="metric-value">{{ metrics.callbacks_processed or 0 }}</span>
                </div>
                <div class="metric">
                    <span class="metric-label">–û—à–∏–±–æ–∫:</span>
                    <span class="metric-value">{{ metrics.errors_count or 0 }}</span>
                </div>
                <div class="metric">
                    <span class="metric-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</span>
                    <span class="metric-value">{{ metrics.active_users_count or 0 }}</span>
                </div>
            </div>
            
            <!-- –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã -->
            <div class="card">
                <div class="card-title">üíª –°–∏—Å—Ç–µ–º–∞</div>
                <div class="metric">
                    <span class="metric-label">–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</span>
                    <span class="metric-value">{{ uptime }}</span>
                </div>
                <div class="metric">
                    <span class="metric-label">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:</span>
                    <span class="metric-value">{{ system_info.memory_percent or 'N/A' }}%</span>
                </div>
                <div class="metric">
                    <span class="metric-label">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU:</span>
                    <span class="metric-value">{{ system_info.cpu_percent or 'N/A' }}%</span>
                </div>
            </div>
        </div>
        
        <!-- –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–¥–æ—Ä–æ–≤—å—è -->
        <div class="grid">
            {% for check_name, check in health_checks.items() %}
            <div class="card {{ check.status }}">
                <div class="card-title">{{ check_name.replace('_', ' ').title() }}</div>
                <div class="metric">
                    <span class="metric-label">–°—Ç–∞—Ç—É—Å:</span>
                    <span class="status-badge status-{{ check.status }}">{{ check.status }}</span>
                </div>
                <div class="metric">
                    <span class="metric-label">–°–æ–æ–±—â–µ–Ω–∏–µ:</span>
                    <span class="metric-value">{{ check.message[:50] }}{% if check.message|length > 50 %}...{% endif %}</span>
                </div>
            </div>
            {% endfor %}
        </div>
        
        <!-- –õ–æ–≥–∏ -->
        <div class="logs-container">
            <div class="logs-header">
                <h2 class="card-title">üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏</h2>
                <div>
                    <button class="refresh-btn" onclick="refreshLogs()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å</button>
                    <span class="auto-refresh">–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: <span id="countdown">30</span>—Å</span>
                </div>
            </div>
            <div class="logs-content" id="logs-content">
                {{ logs }}
            </div>
        </div>
    </div>
    
    <script>
        let countdown = 30;
        let websocket = null;
        
        function connectWebSocket() {
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            websocket = new WebSocket(protocol + '//' + window.location.host + '/ws');
            
            websocket.onmessage = function(event) {
                const data = JSON.parse(event.data);
                if (data.type === 'logs_update') {
                    document.getElementById('logs-content').textContent = data.content;
                    document.getElementById('logs-content').scrollTop = 
                        document.getElementById('logs-content').scrollHeight;
                }
                if (data.type === 'full_update') {
                    location.reload();
                }
            };
            
            websocket.onclose = function() {
                setTimeout(connectWebSocket, 5000);
            };
        }
        
        function refreshLogs() {
            fetch('/api/logs')
                .then(response => response.text())
                .then(data => {
                    document.getElementById('logs-content').textContent = data;
                    document.getElementById('logs-content').scrollTop = 
                        document.getElementById('logs-content').scrollHeight;
                });
        }
        
        function updateCountdown() {
            const countdownElement = document.getElementById('countdown');
            countdownElement.textContent = countdown;
            
            if (countdown <= 0) {
                refreshLogs();
                countdown = 30;
            } else {
                countdown--;
            }
        }
        
        // –ó–∞–ø—É—Å–∫
        connectWebSocket();
        setInterval(updateCountdown, 1000);
        setInterval(() => location.reload(), 60000); // –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    </script>
</body>
</html>'''
        
        with open(templates_dir / 'dashboard.html', 'w', encoding='utf-8') as f:
            f.write(dashboard_html)
    
    def setup_routes(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤."""
        self.app.router.add_get('/', self.dashboard)
        self.app.router.add_get('/api/metrics', self.api_metrics)
        self.app.router.add_get('/api/logs', self.api_logs)
        self.app.router.add_get('/api/health', self.api_health)
        self.app.router.add_get('/ws', self.websocket_handler)
    
    @aiohttp_jinja2.template('dashboard.html')
    async def dashboard(self, request):
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–∞–Ω–µ–ª–∏."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç)
            metrics = self.get_current_metrics()
            health_data = self.get_health_data()
            system_info = self.get_system_info()
            logs = self.get_recent_logs()
            
            # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
            uptime = "N/A"
            if metrics.get('uptime_seconds'):
                uptime_seconds = int(metrics['uptime_seconds'])
                uptime = str(timedelta(seconds=uptime_seconds))
            
            return {
                'metrics': metrics,
                'health_checks': health_data.get('checks', {}),
                'overall_status': health_data.get('overall_status', 'unknown'),
                'last_check': datetime.now().strftime('%H:%M:%S'),
                'system_info': system_info,
                'uptime': uptime,
                'logs': logs
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ dashboard: {e}")
            return {
                'metrics': {},
                'health_checks': {},
                'overall_status': 'unknown',
                'last_check': 'Error',
                'system_info': {},
                'uptime': 'N/A',
                'logs': f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤: {str(e)}'
            }
    
    async def api_metrics(self, request):
        """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫."""
        metrics = self.get_current_metrics()
        return web.json_response(metrics)
    
    async def api_health(self, request):
        """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è."""
        health_data = self.get_health_data()
        return web.json_response(health_data)
    
    async def api_logs(self, request):
        """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤."""
        logs = self.get_recent_logs()
        return web.Response(text=logs, content_type='text/plain')
    
    async def websocket_handler(self, request):
        """WebSocket –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏."""
        ws = web.WebSocketResponse()
        await ws.prepare(request)
        
        self.websockets.add(ws)
        
        try:
            async for msg in ws:
                if msg.type == WSMsgType.TEXT:
                    if msg.data == 'close':
                        await ws.close()
                elif msg.type == WSMsgType.ERROR:
                    logger.error(f'WebSocket error: {ws.exception()}')
        finally:
            self.websockets.discard(ws)
        
        return ws
    
    def get_current_metrics(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏."""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –±–æ—Ç–∞
            from app.services.logger import get_metrics
            return get_metrics()
        except ImportError:
            # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            return {
                'messages_processed': 0,
                'callbacks_processed': 0,
                'errors_count': 0,
                'active_users_count': 0,
                'uptime_seconds': 0
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
            return {}
    
    def get_health_data(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∑–¥–æ—Ä–æ–≤—å–µ."""
        try:
            from app.services.health_monitor import health_monitor
            return health_monitor.get_health_summary()
        except ImportError:
            return {
                'overall_status': 'unknown',
                'checks': {}
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–¥–æ—Ä–æ–≤—å—è: {e}")
            return {
                'overall_status': 'error',
                'checks': {}
            }
    
    def get_system_info(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ."""
        try:
            import psutil
            memory = psutil.virtual_memory()
            cpu = psutil.cpu_percent()
            
            return {
                'memory_percent': round(memory.percent, 1),
                'cpu_percent': round(cpu, 1),
                'memory_available_gb': round(memory.available / (1024**3), 2)
            }
        except ImportError:
            return {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            return {}
    
    def get_recent_logs(self, lines=50):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ª–æ–≥–æ–≤."""
        try:
            logs_dir = Path('logs')
            log_file = logs_dir / 'bot_all.log'
            
            if not log_file.exists():
                return "–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
            with open(log_file, 'r', encoding='utf-8') as f:
                all_lines = f.readlines()
                recent_lines = all_lines[-lines:] if len(all_lines) > lines else all_lines
                
            return ''.join(recent_lines)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
            return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {str(e)}"
    
    async def broadcast_update(self, data):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º WebSocket."""
        if self.websockets:
            message = json.dumps(data)
            for ws in list(self.websockets):
                try:
                    await ws.send_str(message)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    self.websockets.discard(ws)
    
    async def start_background_updates(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
        while True:
            try:
                await asyncio.sleep(30)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤
                logs = self.get_recent_logs()
                await self.broadcast_update({
                    'type': 'logs_update',
                    'content': logs
                })
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä."""
        logger.info(f"üåê –ó–∞–ø—É—Å–∫ –ø–∞–Ω–µ–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞ http://localhost:{self.port}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        asyncio.create_task(self.start_background_updates())
        
        web.run_app(self.app, host='0.0.0.0', port=self.port)


if __name__ == '__main__':
    dashboard = MonitoringDashboard(port=8080)
    dashboard.run()
