#!/usr/bin/env python3
"""
–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –¥–ª—è Replit.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç webhook —Ä–µ–∂–∏–º –¥–ª—è Cloud Run –¥–µ–ø–ª–æ—è.
"""

import os
import sys
import asyncio
import logging
import aiohttp
import json
from dotenv import load_dotenv
from flask import Flask
from threading import Thread
import time

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)

logger = logging.getLogger(__name__)


# ========================================
# KEEP-ALIVE –°–ï–†–í–ï–† –î–õ–Ø –ü–†–ï–î–û–¢–í–†–ê–©–ï–ù–ò–Ø –ó–ê–°–´–ü–ê–ù–ò–Ø
# ========================================

def create_keep_alive_server():
    """–°–æ–∑–¥–∞–µ—Ç Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ Replit VM."""
    app = Flask(__name__)
    
    @app.route('/')
    def home():
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Keep-Alive —Å–µ—Ä–≤–µ—Ä–∞."""
        current_time = time.strftime('%Y-%m-%d %H:%M:%S')
        return f"""
        <html>
        <head>
            <title>Team Bot Keep-Alive</title>
            <meta http-equiv="refresh" content="30">
        </head>
        <body>
            <h1>ü§ñ Team Bot Keep-Alive Server</h1>
            <p>‚úÖ Bot is running and healthy!</p>
            <p>üïê Current time: {current_time}</p>
            <p>üîÑ This page auto-refreshes every 30 seconds</p>
            <p>üì° Use this URL for UptimeRobot monitoring</p>
        </body>
        </html>
        """
    
    @app.route('/health')
    def health():
        """Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è."""
        return {
            "status": "healthy",
            "timestamp": time.time(),
            "service": "telegram-bot-keep-alive"
        }
    
    @app.route('/ping')
    def ping():
        """–ü—Ä–æ—Å—Ç–æ–π ping endpoint."""
        return "pong"
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ Flask –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –≤—ã–≤–æ–¥–∞
    import logging as flask_logging
    flask_log = flask_logging.getLogger('werkzeug')
    flask_log.setLevel(flask_logging.ERROR)
    
    return app


def start_keep_alive_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Keep-Alive —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ç—Ä–µ–¥–µ."""
    try:
        app = create_keep_alive_server()
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞ –ø–æ—Ä—Ç—É 8080, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –æ—Å–Ω–æ–≤–Ω—ã–º webhook (3000)
        app.run(host='0.0.0.0', port=8080, debug=False, use_reloader=False)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Keep-Alive —Å–µ—Ä–≤–µ—Ä–∞: {e}")


def setup_replit_environment():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Replit."""
    logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Replit...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    bot_token = os.getenv('BOT_TOKEN')
    admin_code = os.getenv('ADMIN_CODE')
    
    if not bot_token:
        logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        logger.error("üí° –î–æ–±–∞–≤—å—Ç–µ BOT_TOKEN –≤ Secrets (üîí –∏–∫–æ–Ω–∫–∞ —Å–ª–µ–≤–∞)")
        sys.exit(1)
    
    if not admin_code:
        logger.error("‚ùå ADMIN_CODE –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è") 
        logger.error("üí° –î–æ–±–∞–≤—å—Ç–µ ADMIN_CODE –≤ Secrets (üîí –∏–∫–æ–Ω–∫–∞ —Å–ª–µ–≤–∞)")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —É–∂–µ WEBHOOK_URL
    existing_webhook = os.getenv('WEBHOOK_URL')
    
    if existing_webhook:
        logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π WEBHOOK_URL: {existing_webhook}")
        webhook_url = existing_webhook
    else:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º webhook URL –Ω–∞ –æ—Å–Ω–æ–≤–µ Replit –¥–æ–º–µ–Ω–∞
        replit_domain = os.getenv('REPLIT_DEV_DOMAIN')
        repl_slug = os.getenv('REPL_SLUG', 'team-bot-v2')
        repl_owner = os.getenv('REPL_OWNER', 'user')
        
        if replit_domain:
            webhook_url = f"https://{replit_domain}/webhook"
            logger.info(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω Webhook URL: {webhook_url}")
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º webhook URL –¥–ª—è Replit
            webhook_url = f"https://{repl_slug}.{repl_owner}.repl.co/webhook"
            logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Webhook URL: {webhook_url}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã: webhook –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    use_webhook = os.getenv('USE_WEBHOOK', 'true').lower() == 'true'
    os.environ['USE_WEBHOOK'] = 'true' if use_webhook else 'false'
    os.environ['WEBHOOK_URL'] = webhook_url
    os.environ['PORT'] = '3000'  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç 3000 –∫–æ—Ç–æ—Ä—ã–π –º–∞–ø–ø–∏—Ç—Å—è –Ω–∞ externalPort 80
    
    use_webhook_display = os.getenv('USE_WEBHOOK', 'false').lower() == 'true'
    logger.info(f"‚úÖ –†–µ–∂–∏–º: {'webhook' if use_webhook_display else 'polling'}")
    logger.info(f"‚úÖ Port: {os.environ.get('PORT', '3000')}")
    
    return webhook_url


async def verify_and_update_webhook(webhook_url: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–π webhook URL –≤ Telegram –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    
    Returns:
        bool: True –µ—Å–ª–∏ webhook –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, False –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
    """
    bot_token = os.getenv('BOT_TOKEN')
    if not bot_token:
        logger.error("‚ùå BOT_TOKEN –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook")
        return False
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π webhook
        async with aiohttp.ClientSession() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º webhook
            get_url = f"https://api.telegram.org/bot{bot_token}/getWebhookInfo"
            async with session.get(get_url) as response:
                if response.status != 200:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ webhook info: {response.status}")
                    return False
                
                data = await response.json()
                if not data.get('ok'):
                    logger.error(f"‚ùå Telegram API –æ—à–∏–±–∫–∞: {data.get('description')}")
                    return False
                
                webhook_info = data.get('result', {})
                current_url = webhook_info.get('url')
                pending_count = webhook_info.get('pending_update_count', 0)
                last_error = webhook_info.get('last_error_message')
                
                logger.info(f"üîç –¢–µ–∫—É—â–∏–π webhook: {current_url or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
                if pending_count > 0:
                    logger.warning(f"‚ö†Ô∏è –û–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {pending_count}")
                if last_error:
                    logger.warning(f"‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å webhook
                if current_url == webhook_url:
                    logger.info("‚úÖ Webhook URL –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                    return True
                
                # –û–±–Ω–æ–≤–ª—è–µ–º webhook URL
                logger.info(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º webhook URL: {current_url} ‚Üí {webhook_url}")
                set_url = f"https://api.telegram.org/bot{bot_token}/setWebhook"
                set_data = {
                    'url': webhook_url,
                    'allowed_updates': ['message', 'callback_query']
                }
                
                async with session.post(set_url, data=set_data) as set_response:
                    if set_response.status != 200:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {set_response.status}")
                        return False
                    
                    set_result = await set_response.json()
                    if not set_result.get('ok'):
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {set_result.get('description')}")
                        return False
                    
                    logger.info("‚úÖ Webhook URL —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
                    
                    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                    async with session.get(get_url) as verify_response:
                        if verify_response.status == 200:
                            verify_data = await verify_response.json()
                            if verify_data.get('ok'):
                                verify_info = verify_data.get('result', {})
                                new_url = verify_info.get('url')
                                new_pending = verify_info.get('pending_update_count', 0)
                                
                                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_url}")
                                if new_pending > 0:
                                    logger.info(f"üì¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {new_pending} –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
                    
                    return True
                    
    except aiohttp.ClientError as e:
        logger.error(f"‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å webhook: {e}")
        return False
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ webhook: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –¥–ª—è Replit."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ team-bot –¥–ª—è Replit...")
    
    # ========================================
    # –ó–ê–ü–£–°–ö KEEP-ALIVE –°–ï–†–í–ï–†–ê
    # ========================================
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ Keep-Alive —Å–µ—Ä–≤–µ—Ä–∞...")
    keep_alive_thread = Thread(target=start_keep_alive_server, daemon=True)
    keep_alive_thread.start()
    logger.info("‚úÖ Keep-Alive —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")
    
    # –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
    try:
        from app.services.process_lock import ProcessLock
        
        with ProcessLock("team_bot_replit") as lock:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è Replit
            webhook_url = setup_replit_environment()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
            use_webhook = os.getenv('USE_WEBHOOK', 'false').lower() == 'true'
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ webhook –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            if use_webhook:
                logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º webhook URL...")
                webhook_ok = await verify_and_update_webhook(webhook_url)
                if not webhook_ok:
                    logger.warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å webhook, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫...")
                else:
                    logger.info("‚úÖ Webhook –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            
            if use_webhook:
                logger.info("üåê –ó–∞–ø—É—Å–∫ –≤ webhook —Ä–µ–∂–∏–º–µ...")
                # –ó–∞–ø—É—Å–∫–∞–µ–º webhook —Å–µ—Ä–≤–µ—Ä  
                from aiohttp import web
                from app.__main__ import webhook_main
                
                app, port = await webhook_main()
                runner = web.AppRunner(app)
                await runner.setup()
                
                site = web.TCPSite(runner, '0.0.0.0', port)
                await site.start()
                
                logger.info(f"üöÄ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ 0.0.0.0:{port}")
                
                # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
                while True:
                    await asyncio.sleep(3600)
            else:
                logger.info("üì° –ó–∞–ø—É—Å–∫ –≤ polling —Ä–µ–∂–∏–º–µ...")
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ polling —Ä–µ–∂–∏–º–µ
                from app.__main__ import polling_main
                await polling_main()
    
    except RuntimeError as e:
        logger.error(f"‚ùå {e}")
        logger.info("üí° –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ")
        return 1
    except KeyboardInterrupt:
        logger.info("üî¥ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        return 0
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return 1


if __name__ == '__main__':
    exit_code = asyncio.run(main())
    sys.exit(exit_code)