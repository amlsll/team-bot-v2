"""
–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞, –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ middlewares.
"""

import os
import asyncio
import logging
import os
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π FSM
dp = Dispatcher(storage=MemoryStorage())


# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers —Å—Ä–∞–∑—É
from .handlers import (
    user_start, user_status, user_leave,
    admin_core, admin_match, admin_stats,
    admin_rematch, admin_broadcast, admin_change, admin_questions, team_actions,
    auto_update, admin_restart
)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
dp.include_router(user_start.router)
dp.include_router(user_status.router)
dp.include_router(user_leave.router)
dp.include_router(team_actions.router)
dp.include_router(admin_core.router)
dp.include_router(admin_match.router)
dp.include_router(admin_stats.router)
dp.include_router(admin_rematch.router)
dp.include_router(admin_broadcast.router)
dp.include_router(admin_change.router)
dp.include_router(admin_questions.router)
dp.include_router(auto_update.router)
dp.include_router(admin_restart.router)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
from .middlewares.error_handler import ErrorHandlerMiddleware
dp.message.middleware(ErrorHandlerMiddleware())
dp.callback_query.middleware(ErrorHandlerMiddleware())

logger.info("Handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
logger.info("Middleware –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")


async def on_startup():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""
    from .services.scheduler import MatchScheduler
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook —Ç–æ–ª—å–∫–æ –≤ polling —Ä–µ–∂–∏–º–µ
    use_webhook = os.getenv('USE_WEBHOOK', 'false').lower() == 'true'
    
    try:
        webhook_info = await bot.get_webhook_info()
        if webhook_info.url and not use_webhook:
            logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π webhook –≤ polling —Ä–µ–∂–∏–º–µ: {webhook_info.url}")
            await bot.delete_webhook()
            logger.info("Webhook —É–¥–∞–ª–µ–Ω –¥–ª—è polling —Ä–µ–∂–∏–º–∞")
        elif webhook_info.url and use_webhook:
            logger.info(f"‚úÖ Webhook –∞–∫—Ç–∏–≤–µ–Ω: {webhook_info.url}")
        elif use_webhook:
            logger.info("‚ö†Ô∏è Webhook —Ä–µ–∂–∏–º, –Ω–æ URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ webhook_main)")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ webhook: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –±–æ—Ç–∞
    try:
        me = await bot.get_me()
        logger.info(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{me.username} ({me.first_name})")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è –º–µ–Ω—é
        from aiogram.types import BotCommand
        commands = [
            BotCommand(command="start", description="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
            BotCommand(command="status", description="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"),
            BotCommand(command="leave", description="‚ùå –ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å/–∫–æ–º–∞–Ω–¥—É"),
        ]
        await bot.set_my_commands(commands)
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞
        await bot.set_my_description(
            "ü§ù –ë–æ—Ç –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤ –≤ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–µ ¬´–î–æ–±—Ä–æ–µ –°–µ—Ä–¥—Ü–µ –°—Ç–æ–ª–∏—Ü—ã¬ª\n\n"
            "–ù–∞–∂–º–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        await bot.set_my_short_description(
            "–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤ –≤ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞"
        )
        logger.info("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞: {e}")
        raise
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    try:
        scheduler = MatchScheduler(bot)
        scheduler.start()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
        dp['scheduler'] = scheduler
        logger.info("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    
    logger.info("üéâ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    logger.info("üîÑ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")


async def on_shutdown():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞."""
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = dp.get('scheduler')
    if scheduler:
        scheduler.stop()
    
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º startup/shutdown —Ö—É–∫–∏
dp.startup.register(on_startup)
dp.shutdown.register(on_shutdown)
