"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥.
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Optional

from .storage import Storage
from .matcher import match_round
from .notify import NotificationService

logger = logging.getLogger(__name__)


class MatchScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∫–∞–∂–¥—ã–µ 2 –¥–Ω—è –≤ 12:00."""
    
    def __init__(self, bot):
        self.bot = bot
        self.storage = Storage()
        self.notify_service = NotificationService(bot)
        self._task: Optional[asyncio.Task] = None
        self._running = False
    
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
        if self._running:
            logger.warning("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self._running = True
        self._task = asyncio.create_task(self._scheduler_loop())
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∑–∞–ø—É—â–µ–Ω")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
        if not self._running:
            return
        
        self._running = False
        if self._task and not self._task.done():
            self._task.cancel()
        
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def get_next_match_time(self) -> datetime:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥."""
        now = datetime.now()
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –≤ 12:00
        next_match = now.replace(hour=12, minute=0, second=0, microsecond=0)
        
        # –ï—Å–ª–∏ —É–∂–µ –ø—Ä–æ—à–ª–æ 12:00 —Å–µ–≥–æ–¥–Ω—è, –±–µ—Ä–µ–º –∑–∞–≤—Ç—Ä–∞
        if now.hour >= 12:
            next_match += timedelta(days=1)
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ "–∫–∞–∂–¥—ã–µ 2 –¥–Ω—è"
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º 1 —è–Ω–≤–∞—Ä—è 2024 –∫–∞–∫ –æ–ø–æ—Ä–Ω—É—é —Ç–æ—á–∫—É
        epoch_date = datetime(2024, 1, 1)
        days_since_epoch = (next_match.date() - epoch_date.date()).days
        
        # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–µ –∫—Ä–∞—Ç–Ω–æ 2, –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å
        if days_since_epoch % 2 != 0:
            next_match += timedelta(days=1)
        
        return next_match
    
    def get_next_match_time_str(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è."""
        next_time = self.get_next_match_time()
        return next_time.strftime("%d %B –≤ %H:%M")
    
    async def _scheduler_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        try:
            while self._running:
                # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
                next_match_time = self.get_next_match_time()
                now = datetime.now()
                sleep_seconds = (next_match_time - now).total_seconds()
                
                logger.info(f"–°–ª–µ–¥—É—é—â–µ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞: {next_match_time}")
                
                # –ñ–¥–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                if sleep_seconds > 0:
                    await asyncio.sleep(sleep_seconds)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ–º
                if not self._running:
                    break
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
                await self._perform_auto_match()
                
                # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –≤ —Ç—É –∂–µ –º–∏–Ω—É—Ç—É
                await asyncio.sleep(60)
                
        except asyncio.CancelledError:
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}", exc_info=True)
    
    async def _perform_auto_match(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥."""
        try:
            import os
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            team_base = int(os.getenv('TEAM_BASE', '5'))
            elastic_max = int(os.getenv('ELASTIC_MAX', '2'))
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            store = self.storage.load()
            queue = store['queue'].copy()
            
            if len(queue) < team_base:
                logger.info(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª—é–¥–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {team_base}, –∞ –≤ –æ—á–µ—Ä–µ–¥–∏ {len(queue)}.")
                return
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∞—Ç—á–∏–Ω–≥
            teams_data, remaining_queue = match_round(queue, team_base, elastic_max)
            
            if not teams_data:
                logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            created_teams = []
            for team_members in teams_data:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤ storage
                team_id = self.storage.create_team(team_members)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                for tg_id in team_members:
                    self.storage.set_user_status(tg_id, 'teamed', team_id)
                
                # –£–±–∏—Ä–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                for tg_id in team_members:
                    self.storage.remove_from_queue(tg_id)
                
                created_teams.append(team_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å (–æ—Å—Ç–∞—Ç–æ–∫)
            store = self.storage.load()
            store['queue'] = remaining_queue
            self.storage.save(store)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–º–∞–Ω–¥–∞–º
            for team_id in created_teams:
                team = self.storage.get_team(team_id)
                if team:
                    await self.notify_service.send_team_card_to_members(team)
            
            teams_count = len(created_teams)
            remaining_count = len(remaining_queue)
            
            logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: —Å–æ–∑–¥–∞–Ω–æ –∫–æ–º–∞–Ω–¥ {teams_count}, –≤ –æ—á–µ—Ä–µ–¥–∏ –æ—Å—Ç–∞–ª–æ—Å—å {remaining_count}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω MOD_CHAT_ID)
            mod_chat_id = os.getenv('MOD_CHAT_ID')
            if mod_chat_id:
                admin_message = f"""ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ

‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–º–∞–Ω–¥: {teams_count}
üìã –ö–æ–º–∞–Ω–¥—ã: {', '.join(created_teams)}
‚è≥ –í –æ—á–µ—Ä–µ–¥–∏ –æ—Å—Ç–∞–ª–æ—Å—å: {remaining_count}"""
                
                await self.notify_service.send_to_moderators(admin_message)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥: {e}", exc_info=True)
