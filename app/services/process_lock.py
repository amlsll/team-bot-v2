"""
–°–∏—Å—Ç–µ–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞.
"""

import os
import sys
import time
import psutil
import logging
import tempfile
from pathlib import Path
from typing import Optional

logger = logging.getLogger(__name__)


class ProcessLock:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è."""
    
    def __init__(self, lock_name: str = "team_bot"):
        self.lock_name = lock_name
        self.lock_file = Path(tempfile.gettempdir()) / f"{lock_name}.lock"
        self.pid_file = Path(tempfile.gettempdir()) / f"{lock_name}.pid"
        self._locked = False
        self._current_pid = os.getpid()
    
    def is_process_running(self, pid: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º PID."""
        try:
            process = psutil.Process(pid)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—à –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞
            cmdline = ' '.join(process.cmdline())
            if any(keyword in cmdline.lower() for keyword in ['team_bot', 'start_bot', 'app.__main__', 'bot.py']):
                return process.is_running()
            return False
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            return False
    
    def get_running_instances(self) -> list:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ PID –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞."""
        running_instances = []
        
        for process in psutil.process_iter(['pid', 'cmdline', 'create_time']):
            try:
                cmdline = ' '.join(process.info['cmdline'])
                # –ò—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º
                if any(keyword in cmdline.lower() for keyword in ['team_bot', 'start_bot.py', 'app.__main__', '-m app']):
                    # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
                    if process.info['pid'] != self._current_pid:
                        running_instances.append({
                            'pid': process.info['pid'],
                            'cmdline': cmdline,
                            'start_time': process.info['create_time']
                        })
            except (psutil.NoSuchProcess, psutil.AccessDenied, TypeError):
                continue
        
        return running_instances
    
    def acquire(self, timeout: int = 5) -> bool:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–æ—Ü–µ—Å—Å–∞.
        
        Args:
            timeout: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            True –µ—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞, False –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å
        """
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            if self.lock_file.exists():
                logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π lock —Ñ–∞–π–ª, –ø—Ä–æ–≤–µ—Ä—è–µ–º...")
                
                try:
                    with open(self.lock_file, 'r') as f:
                        existing_pid = int(f.read().strip())
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
                    if self.is_process_running(existing_pid):
                        logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ (PID: {existing_pid})")
                        return False
                    else:
                        logger.info(f"–ù–∞–π–¥–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π lock —Ñ–∞–π–ª (PID: {existing_pid}), —É–¥–∞–ª—è–µ–º...")
                        self._cleanup_stale_lock()
                
                except (ValueError, FileNotFoundError, PermissionError) as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ lock —Ñ–∞–π–ª–∞: {e}, —É–¥–∞–ª—è–µ–º...")
                    self._cleanup_stale_lock()
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            try:
                self.lock_file.parent.mkdir(exist_ok=True)
                
                # –ê—Ç–æ–º–∞—Ä–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å PID
                with open(self.lock_file, 'w') as f:
                    f.write(str(self._current_pid))
                
                # –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º PID —Ñ–∞–π–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                with open(self.pid_file, 'w') as f:
                    f.write(f"{self._current_pid}\n{time.time()}\n")
                
                self._locked = True
                logger.info(f"‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª—É—á–µ–Ω–∞ (PID: {self._current_pid})")
                return True
                
            except (PermissionError, OSError) as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å lock —Ñ–∞–π–ª: {e}")
                time.sleep(0.1)
        
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥")
        return False
    
    def release(self):
        """–û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–æ—Ü–µ—Å—Å–∞."""
        if not self._locked:
            return
        
        try:
            if self.lock_file.exists():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à —Ñ–∞–π–ª
                with open(self.lock_file, 'r') as f:
                    file_pid = int(f.read().strip())
                
                if file_pid == self._current_pid:
                    self.lock_file.unlink()
                    logger.info("‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞")
                else:
                    logger.warning(f"Lock —Ñ–∞–π–ª –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É (PID: {file_pid})")
            
            # –£–¥–∞–ª—è–µ–º PID —Ñ–∞–π–ª
            if self.pid_file.exists():
                self.pid_file.unlink()
                
        except (FileNotFoundError, PermissionError, ValueError) as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
        finally:
            self._locked = False
    
    def _cleanup_stale_lock(self):
        """–£–¥–∞–ª—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ lock —Ñ–∞–π–ª—ã."""
        try:
            if self.lock_file.exists():
                self.lock_file.unlink()
            if self.pid_file.exists():
                self.pid_file.unlink()
        except (FileNotFoundError, PermissionError):
            pass
    
    def __enter__(self):
        """Context manager entry."""
        if not self.acquire():
            running_instances = self.get_running_instances()
            if running_instances:
                logger.error("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞:")
                for instance in running_instances:
                    logger.error(f"   PID: {instance['pid']} | –ö–æ–º–∞–Ω–¥–∞: {instance['cmdline']}")
                logger.error("\nüîß –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
                logger.error("   pkill -f 'team_bot|start_bot|python.*app'")
                logger.error("   –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python stop_all_bots.py")
            
            raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É: –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –∑–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞")
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """Context manager exit."""
        self.release()


def check_running_instances() -> list:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."""
    lock = ProcessLock()
    return lock.get_running_instances()


def stop_all_instances(force: bool = False) -> int:
    """
    –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞.
    
    Args:
        force: –ï—Å–ª–∏ True, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç SIGKILL –≤–º–µ—Å—Ç–æ SIGTERM
        
    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    """
    instances = check_running_instances()
    stopped_count = 0
    
    if not instances:
        logger.info("–ó–∞–ø—É—â–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return 0
    
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(instances)} –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
    
    for instance in instances:
        try:
            process = psutil.Process(instance['pid'])
            
            if force:
                process.kill()
                logger.info(f"üíÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å PID: {instance['pid']}")
            else:
                process.terminate()
                logger.info(f"üõë –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å—É PID: {instance['pid']}")
                
                # –ñ–¥–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                try:
                    process.wait(timeout=10)
                    logger.info(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å PID: {instance['pid']} –∑–∞–≤–µ—Ä—à–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                except psutil.TimeoutExpired:
                    logger.warning(f"‚è∞ –ü—Ä–æ—Ü–µ—Å—Å PID: {instance['pid']} –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏–≤–∞–µ–º...")
                    process.kill()
            
            stopped_count += 1
            
        except (psutil.NoSuchProcess, psutil.AccessDenied) as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å PID: {instance['pid']} - {e}")
    
    # –û—á–∏—â–∞–µ–º –≤—Å–µ lock —Ñ–∞–π–ª—ã
    lock = ProcessLock()
    lock._cleanup_stale_lock()
    
    logger.info(f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {stopped_count} —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞")
    return stopped_count
