"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –±–æ—Ç–∞.
"""

import logging
import logging.handlers
import os
import json
import sys
import traceback
from datetime import datetime, timezone
from typing import Dict, Any, Optional
import threading
import time
from pathlib import Path


class JsonFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è JSON –ª–æ–≥–æ–≤."""
    
    def format(self, record: logging.LogRecord) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å –ª–æ–≥–∞ –≤ JSON."""
        log_data = {
            'timestamp': datetime.fromtimestamp(record.created, tz=timezone.utc).isoformat(),
            'level': record.levelname,
            'logger': record.name,
            'message': record.getMessage(),
            'module': record.module,
            'function': record.funcName,
            'line': record.lineno,
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(record, 'user_id'):
            log_data['user_id'] = record.user_id
        if hasattr(record, 'chat_id'):
            log_data['chat_id'] = record.chat_id
        if hasattr(record, 'handler_name'):
            log_data['handler_name'] = record.handler_name
        if hasattr(record, 'duration'):
            log_data['duration_ms'] = record.duration
        if hasattr(record, 'error_type'):
            log_data['error_type'] = record.error_type
        if hasattr(record, 'stack_trace'):
            log_data['stack_trace'] = record.stack_trace
            
        # –î–æ–±–∞–≤–ª—è–µ–º exception info –µ—Å–ª–∏ –µ—Å—Ç—å
        if record.exc_info:
            log_data['exception'] = {
                'type': record.exc_info[0].__name__,
                'message': str(record.exc_info[1]),
                'traceback': traceback.format_exception(*record.exc_info)
            }
            
        return json.dumps(log_data, ensure_ascii=False)


class BotLogger:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –±–æ—Ç–∞."""
    
    def __init__(self, logs_dir: str = "logs"):
        self.logs_dir = Path(logs_dir)
        self.logs_dir.mkdir(exist_ok=True)
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫
        self._metrics = {
            'messages_processed': 0,
            'callbacks_processed': 0,
            'errors_count': 0,
            'users_active': set(),
            'handlers_timing': {},
            'last_activity': time.time()
        }
        self._metrics_lock = threading.Lock()
        
        self._setup_loggers()
    
    def _setup_loggers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ –ª–æ–≥–≥–µ—Ä—ã."""
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
        self.main_logger = logging.getLogger('team_bot')
        self.main_logger.setLevel(logging.DEBUG)
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ handlers
        self.main_logger.handlers.clear()
        
        # Console handler —Å —Ü–≤–µ—Ç–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setLevel(logging.INFO)
        console_formatter = logging.Formatter(
            '%(asctime)s | %(levelname)-8s | %(name)-20s | %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        console_handler.setFormatter(console_formatter)
        self.main_logger.addHandler(console_handler)
        
        # File handler –¥–ª—è –≤—Å–µ—Ö –ª–æ–≥–æ–≤
        all_logs_file = self.logs_dir / "bot_all.log"
        file_handler = logging.handlers.TimedRotatingFileHandler(
            all_logs_file,
            when='midnight',
            interval=1,
            backupCount=7,
            encoding='utf-8'
        )
        file_handler.setLevel(logging.DEBUG)
        file_handler.setFormatter(console_formatter)
        self.main_logger.addHandler(file_handler)
        
        # JSON handler –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤
        json_logs_file = self.logs_dir / "bot_structured.jsonl"
        json_handler = logging.handlers.TimedRotatingFileHandler(
            json_logs_file,
            when='midnight',
            interval=1,
            backupCount=7,
            encoding='utf-8'
        )
        json_handler.setLevel(logging.INFO)
        json_handler.setFormatter(JsonFormatter())
        self.main_logger.addHandler(json_handler)
        
        # Error handler –¥–ª—è –æ—à–∏–±–æ–∫
        error_logs_file = self.logs_dir / "bot_errors.log"
        error_handler = logging.handlers.TimedRotatingFileHandler(
            error_logs_file,
            when='midnight',
            interval=1,
            backupCount=30,
            encoding='utf-8'
        )
        error_handler.setLevel(logging.ERROR)
        error_handler.setFormatter(JsonFormatter())
        self.main_logger.addHandler(error_handler)
        
        # Performance handler –¥–ª—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        perf_logs_file = self.logs_dir / "bot_performance.jsonl"
        self.perf_handler = logging.handlers.TimedRotatingFileHandler(
            perf_logs_file,
            when='H',  # H –¥–ª—è hourly, –≤–º–µ—Å—Ç–æ 'hourly'
            interval=1,
            backupCount=24,
            encoding='utf-8'
        )
        self.perf_handler.setFormatter(JsonFormatter())
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –º–µ—Ç—Ä–∏–∫
        self.metrics_logger = logging.getLogger('team_bot.metrics')
        self.metrics_logger.setLevel(logging.INFO)
        self.metrics_logger.addHandler(self.perf_handler)
        self.metrics_logger.propagate = False
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è aiogram
        logging.getLogger('aiogram').setLevel(logging.WARNING)
        logging.getLogger('aiohttp').setLevel(logging.WARNING)
        
        self.main_logger.info("üîß –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def get_logger(self, name: str) -> logging.Logger:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–≥–≥–µ—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º."""
        return logging.getLogger(f'team_bot.{name}')
    
    def log_message_processed(self, user_id: int, chat_id: int, message_text: str, handler_name: str = None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è."""
        with self._metrics_lock:
            self._metrics['messages_processed'] += 1
            self._metrics['users_active'].add(user_id)
            self._metrics['last_activity'] = time.time()
        
        logger = self.get_logger('messages')
        logger.info(
            f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {message_text[:50]}{'...' if len(message_text) > 50 else ''}",
            extra={
                'user_id': user_id,
                'chat_id': chat_id,
                'handler_name': handler_name,
                'message_length': len(message_text)
            }
        )
    
    def log_callback_processed(self, user_id: int, chat_id: int, callback_data: str, handler_name: str = None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É callback."""
        with self._metrics_lock:
            self._metrics['callbacks_processed'] += 1
            self._metrics['users_active'].add(user_id)
            self._metrics['last_activity'] = time.time()
        
        logger = self.get_logger('callbacks')
        logger.info(
            f"üîò Callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {callback_data}",
            extra={
                'user_id': user_id,
                'chat_id': chat_id,
                'handler_name': handler_name,
                'callback_data': callback_data
            }
        )
    
    def log_error(self, error: Exception, context: Dict[str, Any] = None, user_id: int = None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º."""
        with self._metrics_lock:
            self._metrics['errors_count'] += 1
        
        logger = self.get_logger('errors')
        
        extra_data = {
            'error_type': type(error).__name__,
            'stack_trace': traceback.format_exc()
        }
        
        if user_id:
            extra_data['user_id'] = user_id
        if context:
            extra_data.update(context)
        
        logger.error(
            f"‚ùå –û—à–∏–±–∫–∞: {str(error)}",
            extra=extra_data,
            exc_info=True
        )
    
    def log_handler_timing(self, handler_name: str, duration_ms: float, user_id: int = None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞."""
        with self._metrics_lock:
            if handler_name not in self._metrics['handlers_timing']:
                self._metrics['handlers_timing'][handler_name] = []
            self._metrics['handlers_timing'][handler_name].append(duration_ms)
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∏–∑–º–µ—Ä–µ–Ω–∏–π
            if len(self._metrics['handlers_timing'][handler_name]) > 100:
                self._metrics['handlers_timing'][handler_name] = \
                    self._metrics['handlers_timing'][handler_name][-100:]
        
        if duration_ms > 1000:  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            logger = self.get_logger('performance')
            logger.warning(
                f"‚è±Ô∏è –ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: {handler_name} ({duration_ms:.2f}ms)",
                extra={
                    'handler_name': handler_name,
                    'duration': duration_ms,
                    'user_id': user_id
                }
            )
    
    def get_metrics(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏."""
        with self._metrics_lock:
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            avg_timings = {}
            for handler, timings in self._metrics['handlers_timing'].items():
                if timings:
                    avg_timings[handler] = {
                        'avg_ms': sum(timings) / len(timings),
                        'max_ms': max(timings),
                        'min_ms': min(timings),
                        'count': len(timings)
                    }
            
            return {
                'messages_processed': self._metrics['messages_processed'],
                'callbacks_processed': self._metrics['callbacks_processed'],
                'errors_count': self._metrics['errors_count'],
                'active_users_count': len(self._metrics['users_active']),
                'last_activity': self._metrics['last_activity'],
                'handlers_performance': avg_timings,
                'uptime_seconds': time.time() - self._start_time if hasattr(self, '_start_time') else 0
            }
    
    def log_metrics(self):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –ª–æ–≥."""
        metrics = self.get_metrics()
        self.metrics_logger.info("üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", extra=metrics)
    
    def reset_metrics(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ –º–µ—Ç—Ä–∏–∫."""
        with self._metrics_lock:
            self._metrics['users_active'].clear()
            self._metrics['handlers_timing'].clear()
    
    def start_metrics_logging(self, interval: int = 300):  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫."""
        self._start_time = time.time()
        
        def log_metrics_periodically():
            while True:
                time.sleep(interval)
                self.log_metrics()
        
        thread = threading.Thread(target=log_metrics_periodically, daemon=True)
        thread.start()
        
        self.main_logger.info(f"üìä –ó–∞–ø—É—â–µ–Ω–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ (–∫–∞–∂–¥—ã–µ {interval}—Å)")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
bot_logger = BotLogger()

# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
def get_logger(name: str) -> logging.Logger:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–≥–≥–µ—Ä –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è."""
    return bot_logger.get_logger(name)

def log_message(user_id: int, chat_id: int, message_text: str, handler_name: str = None):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è."""
    bot_logger.log_message_processed(user_id, chat_id, message_text, handler_name)

def log_callback(user_id: int, chat_id: int, callback_data: str, handler_name: str = None):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É callback."""
    bot_logger.log_callback_processed(user_id, chat_id, callback_data, handler_name)

def log_error(error: Exception, context: Dict[str, Any] = None, user_id: int = None):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É."""
    bot_logger.log_error(error, context, user_id)

def log_timing(handler_name: str, duration_ms: float, user_id: int = None):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
    bot_logger.log_handler_timing(handler_name, duration_ms, user_id)

def get_metrics() -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏."""
    return bot_logger.get_metrics()
