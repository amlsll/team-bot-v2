"""
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: python -m app
"""

import asyncio
import os
import logging
import signal
import sys
from dotenv import load_dotenv

from .bot import bot, dp

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

logger = logging.getLogger(__name__)


async def webhook_main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ webhook."""
    from aiohttp import web
    from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
    
    webhook_url = os.getenv('WEBHOOK_URL')
    port = int(os.getenv('PORT', 3000))
    
    if not webhook_url:
        raise ValueError("WEBHOOK_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏ USE_WEBHOOK=true")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    await bot.set_webhook(webhook_url)
    
    # –°–æ–∑–¥–∞–µ–º aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = web.Application()
    
    # –°–æ–∑–¥–∞–µ–º handler –¥–ª—è webhook
    webhook_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º webhook
    webhook_handler.register(app, path="/webhook")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º GitHub webhook –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    from .handlers.auto_update import setup_github_webhook
    setup_github_webhook(app, "/github-webhook")
    
    # –î–æ–±–∞–≤–ª—è–µ–º health check endpoint –¥–ª—è Replit
    async def health_check(request):
        return web.json_response({"status": "ok", "bot": "@mosvolteambot", "mode": "webhook"})
    
    app.router.add_get("/", health_check)
    app.router.add_get("/health", health_check)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    setup_application(app, dp, bot=bot)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    return app, port


async def polling_main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ long polling."""
    logger.info("üì° –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ long polling...")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
    def signal_handler(sig, frame):
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {sig}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        me = await bot.get_me()
        logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API —É—Å–ø–µ—à–Ω–æ: @{me.username}")
        
        # –û—á–∏—â–∞–µ–º webhook –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        webhook_info = await bot.get_webhook_info()
        if webhook_info.url:
            logger.info(f"–û—á–∏—â–∞–µ–º webhook: {webhook_info.url}")
            await bot.delete_webhook(drop_pending_updates=True)
            logger.info("‚úÖ Webhook –æ—á–∏—â–µ–Ω")
        
        await dp.start_polling(bot, handle_signals=False)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        raise


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ team-bot...")
    
    try:
        use_webhook = os.getenv('USE_WEBHOOK', 'false').lower() == 'true'
        logger.info(f"–ú–æ–¥–µ —Ä–∞–±–æ—Ç—ã: {'webhook' if use_webhook else 'polling'}")
        
        if use_webhook:
            app, port = await webhook_main()
            from aiohttp import web
            logger.info(f"üåê –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            web.run_app(app, host='0.0.0.0', port=port)
        else:
            await polling_main()
            
    except KeyboardInterrupt:
        logger.info("üî¥ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        logger.info("üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == '__main__':
    asyncio.run(main())
