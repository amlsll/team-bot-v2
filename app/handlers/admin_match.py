"""
–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ /adm_match –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥.
"""

import os
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command

from ..services.acl import require_admin
from ..services.storage import Storage
from ..services.matcher import match_round
from ..services.notify import NotificationService

router = Router()


@router.message(Command("adm_match"))
@require_admin
async def cmd_adm_match(message: Message):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω–∏—è."""
    storage = Storage()
    notify_service = NotificationService(message.bot)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ env
    team_base = int(os.getenv('TEAM_BASE', '5'))
    elastic_max = int(os.getenv('ELASTIC_MAX', '2'))
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    store = storage.load()
    queue = store['queue'].copy()
    
    if len(queue) < team_base:
        await message.reply(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª—é–¥–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω–∏—è. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {team_base}, –∞ –≤ –æ—á–µ—Ä–µ–¥–∏ {len(queue)}.")
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∞—Ç—á–∏–Ω–≥
    teams_data, remaining_queue = match_round(queue, team_base, elastic_max)
    
    if not teams_data:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    created_teams = []
    for team_members in teams_data:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤ storage
        team_id = storage.create_team(team_members)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        for tg_id in team_members:
            storage.set_user_status(tg_id, 'teamed', team_id)
        
        # –£–±–∏—Ä–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        for tg_id in team_members:
            storage.remove_from_queue(tg_id)
        
        created_teams.append(team_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å (–æ—Å—Ç–∞—Ç–æ–∫)
    store = storage.load()
    store['queue'] = remaining_queue
    storage.save(store)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–º–∞–Ω–¥–∞–º
    for team_id in created_teams:
        team = storage.get_team(team_id)
        if team:
            await notify_service.send_team_card_to_members(team)
    
    # –û—Ç–≤–µ—á–∞–µ–º –∞–¥–º–∏–Ω—É
    teams_count = len(created_teams)
    remaining_count = len(remaining_queue)
    
    response = f"‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–º–∞–Ω–¥: {teams_count}\n"
    response += f"üìã –ö–æ–º–∞–Ω–¥—ã: {', '.join(created_teams)}\n"
    response += f"‚è≥ –í –æ—á–µ—Ä–µ–¥–∏ –æ—Å—Ç–∞–ª–æ—Å—å: {remaining_count}"
    
    await message.reply(response)
