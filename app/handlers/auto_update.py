"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞.
"""

import os
import json
import logging
from datetime import datetime
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiohttp import web
from aiohttp.web_request import Request

from ..services.acl import require_admin
from ..services.auto_update import AutoUpdateService

logger = logging.getLogger(__name__)

router = Router()


@router.message(Command("adm_update_check"))
@require_admin
async def cmd_check_updates(message: Message):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."""
    update_service = AutoUpdateService()
    
    try:
        has_updates, update_info = update_service.has_updates()
        
        if not has_updates:
            await message.reply("‚úÖ –ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é")
            return
        
        current = update_info.get('current', {})
        remote = update_info.get('remote', {})
        commits_behind = update_info.get('commits_behind', 0)
        
        response = f"""üîÑ **–î–æ—Å—Ç—É–ø–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è**

üìç **–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è:**
‚Ä¢ –ö–æ–º–º–∏—Ç: `{current.get('short_hash', 'unknown')}`
‚Ä¢ –î–∞—Ç–∞: {current.get('date', 'unknown')[:19] if current.get('date') else 'unknown'}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ: {current.get('message', 'unknown')[:50]}{'...' if len(current.get('message', '')) > 50 else ''}

üöÄ **–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è:**
‚Ä¢ –ö–æ–º–º–∏—Ç: `{remote.get('short_hash', 'unknown')}`
‚Ä¢ –î–∞—Ç–∞: {remote.get('date', 'unknown')[:19] if remote.get('date') else 'unknown'}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ: {remote.get('message', 'unknown')[:50]}{'...' if len(remote.get('message', '')) > 50 else ''}
‚Ä¢ –ê–≤—Ç–æ—Ä: {remote.get('author', 'unknown')}

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:** {commits_behind} –Ω–æ–≤—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤

‚ö†Ô∏è **–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:** `/adm_update_apply`"""
        
        await message.reply(response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")


@router.message(Command("adm_update_apply"))
@require_admin
async def cmd_apply_updates(message: Message):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."""
    update_service = AutoUpdateService()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    status_message = await message.reply("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        result = await update_service.perform_full_update(force=False)
        
        if result['success']:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            response = "‚úÖ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!**\n\n"
            
            for step in result['steps']:
                step_name = step['step'].replace('_', ' ').title()
                status_emoji = "‚úÖ" if step['status'] == 'completed' else "‚ùå"
                response += f"{status_emoji} {step_name}\n"
                
                if 'message' in step:
                    response += f"   {step['message'][:100]}{'...' if len(step['message']) > 100 else ''}\n"
                elif 'error' in step:
                    response += f"   ‚ùå {step['error'][:100]}{'...' if len(step['error']) > 100 else ''}\n"
            
            if result['restart_required']:
                response += "\n‚ö†Ô∏è **–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π**"
                response += "\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/adm_restart`"
            
            await status_message.edit_text(response)
            
        else:
            error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            response = f"‚ùå **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å**\n\n{error_msg}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —à–∞–≥–∞—Ö
            for step in result['steps']:
                if step['status'] == 'failed':
                    step_name = step['step'].replace('_', ' ').title()
                    response += f"‚ùå {step_name}: {step.get('error', 'Unknown error')}\n"
            
            await status_message.edit_text(response)
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        await status_message.edit_text(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


@router.message(Command("adm_update_force"))
@require_admin  
async def cmd_force_update(message: Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫."""
    update_service = AutoUpdateService()
    
    status_message = await message.reply("‚ö° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
    
    try:
        result = await update_service.perform_full_update(force=True)
        
        if result['success']:
            response = "‚úÖ **–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ**\n\n"
            
            for step in result['steps']:
                step_name = step['step'].replace('_', ' ').title()
                status_emoji = "‚úÖ" if step['status'] == 'completed' else "‚ùå"
                response += f"{status_emoji} {step_name}\n"
            
            if result['restart_required']:
                response += "\n‚ö†Ô∏è **–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫:** `/adm_restart`"
            
            await status_message.edit_text(response)
        else:
            await status_message.edit_text(f"‚ùå –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {result.get('error')}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        await status_message.edit_text(f"üí• –û—à–∏–±–∫–∞: {e}")


@router.message(Command("adm_update_status"))
@require_admin
async def cmd_update_status(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
    update_service = AutoUpdateService()
    
    try:
        current_info = update_service.get_current_commit_info()
        auto_update_enabled = update_service.auto_update_enabled
        
        response = f"""üìä **–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è**

üîß **–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** {"‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if auto_update_enabled else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ"}
üåø **–í–µ—Ç–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:** {update_service.update_branch}
üîê **GitHub webhook:** {"‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω" if update_service.github_secret else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}

üìç **–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è:**
‚Ä¢ –ö–æ–º–º–∏—Ç: `{current_info.get('short_hash', 'unknown')}`
‚Ä¢ –î–∞—Ç–∞: {current_info.get('date', 'unknown')[:19] if current_info.get('date') else 'unknown'}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ: {current_info.get('message', 'unknown')[:60]}{'...' if len(current_info.get('message', '')) > 60 else ''}
‚Ä¢ –ê–≤—Ç–æ—Ä: {current_info.get('author', 'unknown')}

üéõÔ∏è **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/adm_update_check` ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
‚Ä¢ `/adm_update_apply` ‚Äî –ø—Ä–∏–º–µ–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è  
‚Ä¢ `/adm_update_force` ‚Äî –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
‚Ä¢ `/adm_restart` ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        
        await message.reply(response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ GitHub webhook (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å aiohttp)
async def github_webhook_handler(request: Request) -> web.Response:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ GitHub webhook –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
    update_service = AutoUpdateService()
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        payload_body = await request.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞)
        signature = request.headers.get('X-Hub-Signature-256', '')
        if not update_service.verify_github_signature(payload_body, signature):
            logger.warning("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å GitHub webhook")
            return web.Response(status=401, text="Invalid signature")
        
        # –ü–∞—Ä—Å–∏–º JSON
        try:
            payload = json.loads(payload_body.decode('utf-8'))
        except json.JSONDecodeError:
            logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π JSON –≤ GitHub webhook")
            return web.Response(status=400, text="Invalid JSON")
        
        # –ü–∞—Ä—Å–∏–º webhook –¥–∞–Ω–Ω—ã–µ
        webhook_data = update_service.parse_github_webhook(payload)
        if not webhook_data:
            logger.info("GitHub webhook –Ω–µ –¥–ª—è –Ω–∞—à–µ–π –≤–µ—Ç–∫–∏ –∏–ª–∏ –±–µ–∑ –∫–æ–º–º–∏—Ç–æ–≤")
            return web.Response(status=200, text="OK - ignored")
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω GitHub webhook: {webhook_data['commits_count']} –∫–æ–º–º–∏—Ç–æ–≤ –≤ {webhook_data['branch']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–æ –ª–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if not update_service.auto_update_enabled:
            logger.info("–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º webhook")
            return web.Response(status=200, text="OK - auto-update disabled")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á
            import asyncio
            asyncio.create_task(handle_auto_update(update_service, webhook_data))
            
            return web.Response(status=200, text="OK - update started")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return web.Response(status=500, text=f"Error starting update: {e}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ GitHub webhook: {e}")
        return web.Response(status=500, text=f"Error: {e}")


async def handle_auto_update(update_service: AutoUpdateService, webhook_data: dict):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ webhook."""
    try:
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ GitHub webhook...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        result = await update_service.perform_full_update(force=False)
        
        if result['success']:
            logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            
            # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
            try:
                await notify_admins_about_update(webhook_data, result)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤: {e}")
                
            # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ - –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
            if result['restart_required']:
                logger.info("–ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                import asyncio
                await asyncio.sleep(5)
                await trigger_bot_restart()
                
        else:
            logger.error(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {result.get('error')}")
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")


async def notify_admins_about_update(webhook_data: dict, result: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏."""
    try:
        from ..bot import bot
        from ..services.storage import Storage
        
        storage = Storage()
        admins = storage.get_admins()
        
        if not admins:
            return
        
        commit = webhook_data['commit']
        message = f"""üîÑ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ**

‚úÖ –ë–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏

üìù **–ù–æ–≤—ã–π –∫–æ–º–º–∏—Ç:**
‚Ä¢ ID: `{commit['id'][:8]}`
‚Ä¢ –ê–≤—Ç–æ—Ä: {commit['author']}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ: {commit['message'][:60]}{'...' if len(commit['message']) > 60 else ''}

{"‚ö†Ô∏è –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞" if result['restart_required'] else "‚ÑπÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"}"""
        
        for admin_id in admins:
            try:
                await bot.send_message(admin_id, message)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤: {e}")


async def trigger_bot_restart():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ñ–ª–∞–≥-—Ñ–∞–π–ª –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
        restart_flag = os.path.join(os.path.dirname(__file__), '../../.restart_required')
        with open(restart_flag, 'w') as f:
            f.write(datetime.now().isoformat())
        
        logger.info("–°–æ–∑–¥–∞–Ω —Ñ–ª–∞–≥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
        
        # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –ø—Ä–æ—Ü–µ—Å—Å—É
        import signal
        import os
        os.kill(os.getpid(), signal.SIGTERM)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ webhook endpoint –≤ aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
def setup_github_webhook(app: web.Application, path: str = "/github-webhook"):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç GitHub webhook endpoint."""
    app.router.add_post(path, github_webhook_handler)
    logger.info(f"GitHub webhook –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ {path}")
