"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start –∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
"""

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from ..services.storage import Storage
from ..services.message_manager import message_manager
from ..services.navigation import nav

logger = logging.getLogger(__name__)

router = Router()

class RegistrationStates(StatesGroup):
    waiting_full_name = State()
    waiting_telegram_link = State()

class QuestionStates(StatesGroup):
    waiting_question = State()


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤
WELCOME_TEXT = """–ü—Ä–∏–≤–µ—Ç!

–ï—Å–ª–∏ —Ç—ã –µ—â–µ –Ω–µ –Ω–∞—à–µ–ª –∫–æ–º–∞–Ω–¥—É –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–µ ¬´–î–æ–±—Ä–æ–µ –°–µ—Ä–¥—Ü–µ –°—Ç–æ–ª–∏—Ü—ã¬ª –≤ –Ω–æ–º–∏–Ω–∞—Ü–∏–∏ ¬´–°–æ–æ–±—â–µ—Å—Ç–≤–æ¬ª, —Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–µ–±–µ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞–º–∏ —Å–æ –≤—Å–µ–≥–æ –≥–æ—Ä–æ–¥–∞."""

SECOND_SCREEN_TEXT = """–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è¬ª, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è. –ö–∞–∂–¥—ã–µ 2 –¥–Ω—è –≤ 12:00 –±–æ—Ç –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –Ω—É–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏.

–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞—Ç—å –æ–±—â–∏–π —á–∞—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è."""

REGISTRATION_START_TEXT = """–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–µ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.

–í–≤–µ–¥–∏ —Å–≤–æ–∏ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é:"""

TELEGRAM_LINK_TEXT = """–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π Telegram:

–ù–∞–ø—Ä–∏–º–µ—Ä: @username –∏–ª–∏ https://t.me/username"""

JOIN_SUCCESS_TEXT = """–í –æ–∂–∏–¥–∞–Ω–∏–∏ —Å–µ–π—á–∞—Å {queue_count} —á–µ–ª–æ–≤–µ–∫.

–ë–ª–∏–∂–∞–π—à–µ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç {next_match_time}"""

QUESTION_INFO_TEXT = """–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∑–≤–æ–Ω–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –≥–æ—Ä—è—á–µ–π –ª–∏–Ω–∏–∏ –∫–æ–Ω–∫—É—Ä—Å–∞: +7 (499) 722‚Å†-69‚Å†-99 –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º –∫–æ–Ω–∫—É—Ä—Å–∞."""

QUESTION_PROMPT_TEXT = """–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º –∫–æ–Ω–∫—É—Ä—Å–∞:"""

QUESTION_SENT_TEXT = """–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ."""


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    if not message.from_user:
        logger.warning("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
        return
    
    tg_id = message.from_user.id
    username = message.from_user.username or "unknown"
    logger.info(f"üöÄ –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id} (@{username})")
    
    try:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        await state.clear()
        
        storage = Storage()
        user = storage.get_user(tg_id)
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id}: {user}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start –¥–ª—è {tg_id}: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    try:
        logger.info(f"üîç –û–¢–õ–ê–î–ö–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id}, user={user}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
        logger.info(f"üì∏ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω —Å –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
        photo_path = "attached_assets/photo_2025-09-09 10.29.13_1757408967495.jpeg"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
        keyboard = nav.create_simple_keyboard_with_back([
            ("–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", "start_bot"),
            ("–£ –º–µ–Ω—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å", "ask_question")
        ], None)  # –ù–µ—Ç –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
            photo = FSInputFile(photo_path)
            sent_message = await message.bot.send_photo(
                chat_id=message.chat.id,
                photo=photo,
                caption=WELCOME_TEXT,
                reply_markup=keyboard
            )
            message_manager.store_message(tg_id, sent_message.message_id)
            logger.info(f"‚úÖ –ù–æ–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            return
        except FileNotFoundError:
            # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            logger.warning(f"‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {photo_path}")
            await message_manager.send_and_store(message.bot, message.chat.id, WELCOME_TEXT, reply_markup=keyboard)
            logger.info(f"‚úÖ –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏")
            return
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
            await message_manager.send_and_store(message.bot, message.chat.id, WELCOME_TEXT, reply_markup=keyboard)
            logger.info(f"‚úÖ –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ —Å —Ñ–æ—Ç–æ")
            return
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–µ /start –¥–ª—è {tg_id}: {e}")
        try:
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        except:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}")


@router.callback_query(F.data == "start_bot")
async def callback_start_bot(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' - –ø–µ—Ä–µ—Ö–æ–¥ –∫–æ –≤—Ç–æ—Ä–æ–º—É —ç–∫—Ä–∞–Ω—É."""
    if not callback.from_user:
        return
    
    keyboard = nav.create_simple_keyboard_with_back([
        ("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", "start_registration"),
        ("–£ –º–µ–Ω—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å", "ask_question")
    ], "go_back_to_start")
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
    try:
        if callback.message and callback.message.chat:
            await callback.message.delete()
            sent_message = await callback.bot.send_message(
                chat_id=callback.message.chat.id,
                text=SECOND_SCREEN_TEXT,
                reply_markup=keyboard
            )
            message_manager.store_message(callback.from_user.id, sent_message.message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫–æ –≤—Ç–æ—Ä–æ–º—É —ç–∫—Ä–∞–Ω—É: {e}")
        
    await callback.answer()


@router.callback_query(F.data == "start_registration")
async def callback_start_registration(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not callback.from_user:
        return
    
    storage = Storage()
    tg_id = callback.from_user.id
    user = storage.get_user(tg_id)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
    if user and user.get('full_name') and user.get('telegram_link'):
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ waiting –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        storage.set_user_status(tg_id, 'waiting', None)
        storage.enqueue(tg_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        queue_count = len(storage.load()['queue'])
        next_match_time = get_next_match_time()
        
        text = JOIN_SUCCESS_TEXT.format(
            queue_count=queue_count,
            next_match_time=next_match_time
        )
        
        keyboard = nav.create_simple_keyboard_with_back([
            ("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è", "status"),
            ("–í—ã–π—Ç–∏ –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è", "leave"),
            ("–£ –º–µ–Ω—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å", "ask_question")
        ], None)  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–∂–∏–¥–∞–Ω–∏–∏
        
        await message_manager.edit_and_store(callback, text, reply_markup=keyboard)
        await callback.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å! üëã")
        return
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await state.set_state(RegistrationStates.waiting_full_name)
    keyboard = nav.create_keyboard_with_back([], "go_back_from_registration")
    await message_manager.edit_and_store(callback, REGISTRATION_START_TEXT, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "ask_question")
async def callback_ask_question(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–£ –º–µ–Ω—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å'."""
    if not callback.from_user:
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="write_question")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="go_back")]
    ])
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
    try:
        await callback.message.delete()
        sent_message = await callback.bot.send_message(
            chat_id=callback.message.chat.id,
            text=QUESTION_INFO_TEXT,
            reply_markup=keyboard
        )
        message_manager.store_message(callback.from_user.id, sent_message.message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –≤–æ–ø—Ä–æ—Å–∞–º: {e}")
        
    await callback.answer()


@router.callback_query(F.data == "write_question")
async def callback_write_question(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ–º –≤–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞."""
    if not callback.from_user:
        return
    
    await state.set_state(QuestionStates.waiting_question)
    await message_manager.edit_and_store(callback, QUESTION_PROMPT_TEXT)
    await callback.answer()


@router.callback_query(F.data.in_(["go_back", "go_back_to_start"]))
async def callback_go_back(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —ç–∫—Ä–∞–Ω—É."""
    if not callback.from_user:
        return
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—á–∞–ª—É
    # –í–º–µ—Å—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è frozen –æ–±—ä–µ–∫—Ç–∞, –≤—ã–∑—ã–≤–∞–µ–º –ª–æ–≥–∏–∫—É –Ω–∞–ø—Ä—è–º—É—é
    try:
        tg_id = callback.from_user.id
        username = callback.from_user.username or "unknown"
        logger.info(f"üîô –í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—á–∞–ª—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id} (@{username})")
        
        await state.clear()
        
        storage = Storage()
        user = storage.get_user(tg_id)
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        if user and user.get('full_name') and user.get('telegram_link'):
            if user.get('status') == 'waiting':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ—á–µ—Ä–µ–¥–∏
                in_queue = storage.get_queue_position(tg_id) != -1
                if in_queue:
                    queue_count = len(storage.load()['queue'])
                    next_match_time = get_next_match_time()
                    text = JOIN_SUCCESS_TEXT.format(
                        queue_count=queue_count,
                        next_match_time=next_match_time
                    )
                    keyboard = nav.create_simple_keyboard_with_back([
                        ("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è", "status"),
                        ("–í—ã–π—Ç–∏ –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è", "leave"),
                        ("–£ –º–µ–Ω—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å", "ask_question")
                    ], None)  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ä–µ–∫—É—Ä—Å–∏–∏
                    await message_manager.edit_and_store(callback, text, reply_markup=keyboard)
                    await callback.answer()
                    return
                else:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
                    keyboard = nav.create_simple_keyboard_with_back([
                        ("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", "start_registration"),
                        ("–£ –º–µ–Ω—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å", "ask_question")
                    ], None)  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ä–µ–∫—É—Ä—Å–∏–∏
                    await message_manager.edit_and_store(callback, SECOND_SCREEN_TEXT, reply_markup=keyboard)
                    await callback.answer()
                    return
            elif user.get('status') == 'teamed':
                await message_manager.edit_and_store(callback, "–¢—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –∫–æ–º–∞–Ω–¥–µ! –ò—Å–ø–æ–ª—å–∑—É–π /status –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ.")
                await callback.answer()
                return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –ú–æ—Å–í–æ–ª–æ–Ω—Ç—ë—Ä
        photo_path = "attached_assets/photo_2025-09-09 10.29.13_1757408967495.jpeg"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
        keyboard = nav.create_simple_keyboard_with_back([
            ("–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", "start_bot"),
            ("–£ –º–µ–Ω—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å", "ask_question")
        ], None)  # –ù–µ—Ç –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ
        
        try:
            # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å —Ñ–æ—Ç–æ
            if callback.message and callback.message.chat:
                await callback.bot.delete_message(callback.message.chat.id, callback.message.message_id)
                
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
                photo = FSInputFile(photo_path)
                sent_message = await callback.bot.send_photo(
                    chat_id=callback.message.chat.id,
                    photo=photo,
                    caption=WELCOME_TEXT,
                    reply_markup=keyboard
                )
                message_manager.store_message(callback.from_user.id, sent_message.message_id)
        except FileNotFoundError:
            # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            logger.warning(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {photo_path}")
            await message_manager.edit_and_store(callback, WELCOME_TEXT, reply_markup=keyboard)
        except Exception as e:
            # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç: {e}")
            await message_manager.edit_and_store(callback, WELCOME_TEXT, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        tg_id = callback.from_user.id if callback.from_user else 0
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –Ω–∞—á–∞–ª—É –¥–ª—è {tg_id}: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start", show_alert=True)


@router.callback_query(F.data == "go_back_from_registration")
async def callback_go_back_from_registration(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    if not callback.from_user:
        return
    
    try:
        await state.clear()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π —ç–∫—Ä–∞–Ω (—Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è")
        keyboard = nav.create_simple_keyboard_with_back([
            ("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", "start_registration"),
            ("–£ –º–µ–Ω—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å", "ask_question")
        ], "go_back_to_start")
        
        await message_manager.edit_and_store(callback, SECOND_SCREEN_TEXT, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start", show_alert=True)


@router.message()
async def handle_any_message(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. 
    –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω.
    """
    if not message.from_user or not message.text:
        return
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –≤–æ–ø—Ä–æ—Å—ã)
    current_state = await state.get_state()
    if current_state:
        return
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
    if message.text.startswith('/'):
        return
    
    tg_id = message.from_user.id
    storage = Storage()
    user = storage.get_user(tg_id)
    
    try:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω, –∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /start
        if not user:
            logger.info(f"üëã –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id}, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /start")
            
            # –ü—Ä–æ—Å–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
            await message_manager.send_and_store(message.bot, message.chat.id, 
                "–ü—Ä–∏–≤–µ—Ç! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start")
        else:
            # –î–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏
            await message_manager.send_and_store(message.bot, message.chat.id, 
                "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –∏–ª–∏ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞.")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {tg_id}: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")


@router.message(QuestionStates.waiting_question)
async def process_question(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞."""
    if not message.text or not message.from_user:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º.")
        return
    
    storage = Storage()
    question_id = storage.create_question(
        user_id=message.from_user.id,
        username=message.from_user.username,
        text=message.text
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ
    await notify_admins_about_question(message.bot, question_id, message.from_user, message.text)
    
    await state.clear()
    await message_manager.answer_and_store(message, QUESTION_SENT_TEXT)


@router.message(RegistrationStates.waiting_full_name)
async def process_full_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏."""
    if not message.text:
        await message_manager.answer_and_store(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–∏ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é —Ç–µ–∫—Å—Ç–æ–º.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —Ö–æ—Ç—è –±—ã –¥–≤–∞ —Å–ª–æ–≤–∞
    name_parts = message.text.strip().split()
    if len(name_parts) < 2:
        await message_manager.answer_and_store(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∏ –ò–º—è, –∏ –§–∞–º–∏–ª–∏—é (–¥–≤–∞ —Å–ª–æ–≤–∞ –º–∏–Ω–∏–º—É–º).")
        return
    
    await state.update_data(full_name=message.text.strip())
    await state.set_state(RegistrationStates.waiting_telegram_link)
    await message_manager.answer_and_store(message, TELEGRAM_LINK_TEXT)


@router.message(RegistrationStates.waiting_telegram_link)
async def process_telegram_link(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ Telegram."""
    if not message.text:
        await message_manager.answer_and_store(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π Telegram.")
        return
    
    telegram_link = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if not (telegram_link.startswith('@') or 'telegram' in telegram_link or 't.me' in telegram_link):
        await message_manager.answer_and_store(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Telegram (–Ω–∞–ø—Ä–∏–º–µ—Ä: @username –∏–ª–∏ https://t.me/username)")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    full_name = data.get('full_name')
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirmation_text = f"""–ü—Ä–æ–≤–µ—Ä—å –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:

–ò–º—è –§–∞–º–∏–ª–∏—è: {full_name}
–°—Å—ã–ª–∫–∞ –Ω–∞ Telegram: {telegram_link}

–í—Å–µ –≤–µ—Ä–Ω–æ?"""
    
    keyboard = nav.create_keyboard_with_back([
        [
            InlineKeyboardButton(text="–î–∞, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ", callback_data="confirm_registration"),
            InlineKeyboardButton(text="–ò—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data="restart_registration")
        ]
    ], "go_back_from_registration")
    
    await state.update_data(telegram_link=telegram_link)
    await message_manager.answer_and_store(message, confirmation_text, reply_markup=keyboard)


@router.callback_query(F.data == "confirm_registration")
async def callback_confirm_registration(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å."""
    if not callback.from_user:
        return
    
    data = await state.get_data()
    storage = Storage()
    tg_id = callback.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    storage.update_user(
        tg_id=tg_id,
        username=callback.from_user.username,
        name=callback.from_user.full_name,
        full_name=data['full_name'],
        telegram_link=data['telegram_link'],
        status='waiting'
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
    storage.enqueue(tg_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    queue_count = len(storage.load()['queue'])
    next_match_time = get_next_match_time()
    
    text = JOIN_SUCCESS_TEXT.format(
        queue_count=queue_count,
        next_match_time=next_match_time
    )
    
    await message_manager.edit_and_store(callback, text)
    await callback.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å! üëã")
    await state.clear()


@router.callback_query(F.data == "restart_registration")
async def callback_restart_registration(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    await state.set_state(RegistrationStates.waiting_full_name)
    keyboard = nav.create_keyboard_with_back([], "go_back_from_registration")
    await message_manager.edit_and_store(callback, REGISTRATION_START_TEXT, reply_markup=keyboard)
    await callback.answer()


def get_next_match_time() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥."""
    from ..services.scheduler import MatchScheduler
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–Ω–≥–ª—Ç–æ–Ω –∏–ª–∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    scheduler = MatchScheduler(None)  # bot –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    return scheduler.get_next_match_time_str()


async def show_registered_user_start_screen(callback_or_message, tg_id: int):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏, —Ç–∞–∫ –∏ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º /start.
    """
    storage = Storage()
    user = storage.get_user(tg_id)
    
    if not user or not user.get('full_name') or not user.get('telegram_link'):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        return False
    
    if user.get('status') == 'waiting':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ—á–µ—Ä–µ–¥–∏
        in_queue = storage.get_queue_position(tg_id) != -1
        
        if in_queue:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ—á–µ—Ä–µ–¥–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –æ–∂–∏–¥–∞–Ω–∏—è
            queue_count = len(storage.load()['queue'])
            next_match_time = get_next_match_time()
            text = JOIN_SUCCESS_TEXT.format(
                queue_count=queue_count,
                next_match_time=next_match_time
            )
            keyboard = nav.create_simple_keyboard_with_back([
                ("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è", "status"),
                ("–í—ã–π—Ç–∏ –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è", "leave"),
                ("–£ –º–µ–Ω—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å", "ask_question")
            ], None)  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–∂–∏–¥–∞–Ω–∏–∏
            await message_manager.edit_and_store(callback_or_message, text, reply_markup=keyboard)
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
            keyboard = nav.create_simple_keyboard_with_back([
                ("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", "start_registration"),
                ("–£ –º–µ–Ω—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å", "ask_question")
            ], None)  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await message_manager.edit_and_store(callback_or_message, SECOND_SCREEN_TEXT, reply_markup=keyboard)
    elif user.get('status') == 'teamed':
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ
        await message_manager.edit_and_store(callback_or_message, "–¢—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –∫–æ–º–∞–Ω–¥–µ! –ò—Å–ø–æ–ª—å–∑—É–π /status –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ.")
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
        keyboard = nav.create_simple_keyboard_with_back([
            ("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", "start_registration"),
            ("–£ –º–µ–Ω—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å", "ask_question")
        ], None)  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await message_manager.edit_and_store(callback_or_message, SECOND_SCREEN_TEXT, reply_markup=keyboard)
    
    return True


async def notify_admins_about_question(bot, question_id: str, user, question_text: str):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ."""
    storage = Storage()
    store = storage.load()
    
    user_mention = f"@{user.username}" if user.username else f"ID {user.id}"
    admin_text = f"üìã –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_mention}:\n\n{question_text}\n\nüí¨ –î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π: /answer {question_id} <—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞>"
    
    for admin_id, is_admin in store['admins'].items():
        if is_admin:
            try:
                await bot.send_message(admin_id, admin_text)
            except Exception as e:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–∞–¥–º–∏–Ω –º–æ–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞)
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
@router.callback_query(F.data == "status")
async def callback_status(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è'."""
    if not callback.from_user:
        return
    
    try:
        from .user_status import cmd_status
        # –°–æ–∑–¥–∞–µ–º mock –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        class MockMessage:
            def __init__(self, callback_query):
                self.from_user = callback_query.from_user
                self.chat = callback_query.message.chat
                self.message_id = callback_query.message.message_id
                self.bot = callback_query.bot
            
            async def reply(self, text, **kwargs):
                await self.bot.send_message(self.chat.id, text, **kwargs)
        
        mock_message = MockMessage(callback)
        await cmd_status(mock_message)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status", show_alert=True)


@router.callback_query(F.data == "leave")
async def callback_leave(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í—ã–π—Ç–∏ –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è'."""
    if not callback.from_user:
        return
    
    try:
        storage = Storage()
        tg_id = callback.from_user.id
        
        user = storage.get_user(tg_id)
        if not user:
            await callback.message.edit_text("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback.answer()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ –ø–æ–∫–∏–¥–∞—Ç—å
        in_queue = storage.get_queue_position(tg_id) != -1
        in_team = user.get('status') == 'teamed' and user.get('team_id')
        
        if not in_queue and not in_team:
            await callback.message.edit_text("–¢—ã –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –∏ –Ω–µ –≤ –∫–æ–º–∞–Ω–¥–µ.")
            await callback.answer()
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–î–∞", callback_data="leave_confirm"),
                InlineKeyboardButton(text="–ù–µ—Ç", callback_data="leave_cancel")
            ]
        ])
        
        await callback.message.edit_text("–¢–æ—á–Ω–æ –≤—ã–π—Ç–∏?", reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {e}")
        await callback.answer("–û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /leave", show_alert=True)


# –£–¥–∞–ª–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã leave_confirm –∏ leave_cancel
# –û–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ user_leave.py
