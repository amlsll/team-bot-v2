"""
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤.
"""

import asyncio
import json
from datetime import datetime, timedelta
from pathlib import Path
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

from ..services.acl import admin_required
from ..services.logger import get_logger, get_metrics
from ..services.health_monitor import health_monitor
from ..services.navigation import create_pagination_keyboard

logger = get_logger('admin_monitoring')
router = Router()


@router.message(Command("health"))
@admin_required
async def cmd_health_check(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞."""
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
        await health_monitor.run_all_checks()
        summary = health_monitor.get_health_summary()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
        status_emoji = {
            'healthy': '‚úÖ',
            'warning': '‚ö†Ô∏è',
            'critical': '‚ùå',
            'unknown': '‚ùì'
        }
        
        overall_emoji = status_emoji.get(summary['overall_status'], '‚ùì')
        
        text = f"üè• <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞</b>\n\n"
        text += f"{overall_emoji} <b>–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {summary['overall_status'].upper()}\n"
        text += f"üìä <b>–ü—Ä–æ–≤–µ—Ä–æ–∫:</b> {summary['checks_count']}\n"
        text += f"‚úÖ –ó–¥–æ—Ä–æ–≤—ã—Ö: {summary['healthy_count']}\n"
        text += f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {summary['warning_count']}\n"
        text += f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {summary['critical_count']}\n\n"
        
        text += "<b>–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫:</b>\n"
        for name, check in summary['checks'].items():
            emoji = status_emoji.get(check['status'], '‚ùì')
            text += f"{emoji} <code>{name}</code>: {check['message']}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="health_refresh"),
                InlineKeyboardButton(text="üìä –ú–µ—Ç—Ä–∏–∫–∏", callback_data="show_metrics")
            ],
            [
                InlineKeyboardButton(text="üìã –õ–æ–≥–∏", callback_data="show_logs"),
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="admin_menu")
            ]
        ])
        
        await message.answer(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–¥–æ—Ä–æ–≤—å—è: {str(e)}")


@router.callback_query(F.data == "health_refresh")
@admin_required
async def callback_health_refresh(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–¥–æ—Ä–æ–≤—å–µ."""
    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
    
    try:
        await health_monitor.run_all_checks()
        summary = health_monitor.get_health_summary()
        
        status_emoji = {
            'healthy': '‚úÖ',
            'warning': '‚ö†Ô∏è',
            'critical': '‚ùå',
            'unknown': '‚ùì'
        }
        
        overall_emoji = status_emoji.get(summary['overall_status'], '‚ùì')
        
        text = f"üè• <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞</b> (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)\n\n"
        text += f"{overall_emoji} <b>–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {summary['overall_status'].upper()}\n"
        text += f"üìä <b>–ü—Ä–æ–≤–µ—Ä–æ–∫:</b> {summary['checks_count']}\n"
        text += f"‚úÖ –ó–¥–æ—Ä–æ–≤—ã—Ö: {summary['healthy_count']}\n"
        text += f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {summary['warning_count']}\n"
        text += f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {summary['critical_count']}\n\n"
        
        text += "<b>–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫:</b>\n"
        for name, check in summary['checks'].items():
            emoji = status_emoji.get(check['status'], '‚ùì')
            text += f"{emoji} <code>{name}</code>: {check['message']}\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="health_refresh"),
                InlineKeyboardButton(text="üìä –ú–µ—Ç—Ä–∏–∫–∏", callback_data="show_metrics")
            ],
            [
                InlineKeyboardButton(text="üìã –õ–æ–≥–∏", callback_data="show_logs"),
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="admin_menu")
            ]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)


@router.callback_query(F.data == "show_metrics")
@admin_required
async def callback_show_metrics(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    await callback.answer()
    
    try:
        metrics = get_metrics()
        
        text = "üìä <b>–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</b>\n\n"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
        text += f"üì© <b>–°–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {metrics.get('messages_processed', 0)}\n"
        text += f"üîò <b>Callback'–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {metrics.get('callbacks_processed', 0)}\n"
        text += f"‚ùå <b>–û—à–∏–±–æ–∫:</b> {metrics.get('errors_count', 0)}\n"
        text += f"üë• <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {metrics.get('active_users_count', 0)}\n"
        
        # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        uptime_seconds = metrics.get('uptime_seconds', 0)
        uptime_str = str(timedelta(seconds=int(uptime_seconds)))
        text += f"‚è±Ô∏è <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {uptime_str}\n\n"
        
        # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        last_activity = metrics.get('last_activity', 0)
        if last_activity > 0:
            last_activity_dt = datetime.fromtimestamp(last_activity)
            text += f"üïê <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {last_activity_dt.strftime('%H:%M:%S')}\n\n"
        
        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        handlers_perf = metrics.get('handlers_performance', {})
        if handlers_perf:
            text += "<b>üöÄ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:</b>\n"
            for handler, stats in sorted(handlers_perf.items(), key=lambda x: x[1]['avg_ms'], reverse=True)[:10]:
                avg_ms = stats['avg_ms']
                count = stats['count']
                emoji = "üêå" if avg_ms > 1000 else "‚ö°" if avg_ms < 100 else "üü°"
                text += f"{emoji} <code>{handler}</code>: {avg_ms:.1f}ms (√ó{count})\n"
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="show_metrics"),
                InlineKeyboardButton(text="üè• –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="health_refresh")
            ],
            [
                InlineKeyboardButton(text="üìã –õ–æ–≥–∏", callback_data="show_logs"),
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="admin_menu")
            ]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ—Ç—Ä–∏–∫: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)


@router.callback_query(F.data == "show_logs")
@admin_required
async def callback_show_logs(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏."""
    await callback.answer()
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤
        logs_dir = Path('logs')
        if not logs_dir.exists():
            await callback.answer("üìã –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        log_files = sorted(logs_dir.glob('*.log*'), key=lambda x: x.stat().st_mtime, reverse=True)
        
        text = "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤</b>\n\n"
        
        if not log_files:
            text += "–§–∞–π–ª—ã –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        else:
            for i, log_file in enumerate(log_files[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
                file_stat = log_file.stat()
                size_mb = file_stat.st_size / (1024 * 1024)
                modified = datetime.fromtimestamp(file_stat.st_mtime)
                text += f"üìÑ <code>{log_file.name}</code>\n"
                text += f"   üíæ {size_mb:.1f}MB, –∏–∑–º–µ–Ω–µ–Ω {modified.strftime('%H:%M:%S')}\n\n"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ª–æ–≥–æ–≤
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∏", callback_data="view_log_errors"),
                InlineKeyboardButton(text="üìä –ú–µ—Ç—Ä–∏–∫–∏", callback_data="view_log_metrics")
            ],
            [
                InlineKeyboardButton(text="üìù –í—Å–µ –ª–æ–≥–∏", callback_data="view_log_all"),
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="show_logs")
            ],
            [
                InlineKeyboardButton(text="üè• –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="health_refresh"),
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="admin_menu")
            ]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ª–æ–≥–æ–≤: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)


@router.callback_query(F.data.startswith("view_log_"))
@admin_required
async def callback_view_log(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥–∞."""
    await callback.answer()
    
    log_type = callback.data.split("_")[-1]
    
    try:
        logs_dir = Path('logs')
        log_file = None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª –ª–æ–≥–∞ –ø–æ —Ç–∏–ø—É
        if log_type == "errors":
            log_file = logs_dir / "bot_errors.log"
        elif log_type == "metrics":
            log_file = logs_dir / "bot_performance.jsonl"
        elif log_type == "all":
            log_file = logs_dir / "bot_all.log"
        
        if not log_file or not log_file.exists():
            await callback.answer(f"–§–∞–π–ª –ª–æ–≥–∞ {log_type} –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
        lines_to_read = 20
        with open(log_file, 'r', encoding='utf-8') as f:
            lines = f.readlines()
            last_lines = lines[-lines_to_read:] if len(lines) > lines_to_read else lines
        
        text = f"üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏: {log_file.name}</b>\n\n"
        
        if not last_lines:
            text += "–õ–æ–≥ –ø—É—Å—Ç"
        else:
            for line in last_lines:
                line = line.strip()
                if len(line) > 100:
                    line = line[:97] + "..."
                text += f"<code>{line}</code>\n"
        
        text += f"\nüìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {len(lines)}"
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"view_log_{log_type}"),
                InlineKeyboardButton(text="üìã –í—Å–µ –ª–æ–≥–∏", callback_data="show_logs")
            ],
            [
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="admin_menu")
            ]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ª–æ–≥–∞ {log_type}: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)


@router.message(Command("metrics"))
@admin_required
async def cmd_metrics(message: Message):
    """–ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Ç—Ä–∏–∫."""
    try:
        metrics = get_metrics()
        
        text = "üìä <b>–ë—ã—Å—Ç—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏</b>\n\n"
        text += f"üì© –°–æ–æ–±—â–µ–Ω–∏–π: {metrics.get('messages_processed', 0)}\n"
        text += f"üîò Callback'–æ–≤: {metrics.get('callbacks_processed', 0)}\n"
        text += f"‚ùå –û—à–∏–±–æ–∫: {metrics.get('errors_count', 0)}\n"
        text += f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {metrics.get('active_users_count', 0)}\n"
        
        uptime_seconds = metrics.get('uptime_seconds', 0)
        if uptime_seconds > 0:
            uptime_str = str(timedelta(seconds=int(uptime_seconds)))
            text += f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_str}\n"
        
        error_rate = 0
        total_ops = metrics.get('messages_processed', 0) + metrics.get('callbacks_processed', 0)
        if total_ops > 0:
            error_rate = metrics.get('errors_count', 0) / total_ops
        text += f"üìà –ß–∞—Å—Ç–æ—Ç–∞ –æ—à–∏–±–æ–∫: {error_rate:.1%}\n"
        
        await message.answer(text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ—Ç—Ä–∏–∫: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫: {str(e)}")


@router.message(Command("logs"))
@admin_required
async def cmd_logs(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏–∑ –ª–æ–≥–æ–≤."""
    try:
        logs_dir = Path('logs')
        error_log = logs_dir / "bot_errors.log"
        
        if not error_log.exists():
            await message.answer("üìã –§–∞–π–ª –æ—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫
        with open(error_log, 'r', encoding='utf-8') as f:
            lines = f.readlines()
            last_errors = lines[-10:] if len(lines) > 10 else lines
        
        if not last_errors:
            text = "‚úÖ –ù–µ–¥–∞–≤–Ω–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        else:
            text = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:</b>\n\n"
            for line in last_errors:
                line = line.strip()
                if len(line) > 150:
                    line = line[:147] + "..."
                text += f"<code>{line}</code>\n\n"
        
        await message.answer(text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {str(e)}")


@router.message(Command("clear_logs"))
@admin_required
async def cmd_clear_logs(message: Message):
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏."""
    try:
        logs_dir = Path('logs')
        if not logs_dir.exists():
            await message.answer("üìã –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
        cutoff_time = datetime.now() - timedelta(days=7)
        cutoff_timestamp = cutoff_time.timestamp()
        
        removed_count = 0
        freed_mb = 0
        
        for log_file in logs_dir.glob('*.log*'):
            if log_file.is_file() and log_file.stat().st_mtime < cutoff_timestamp:
                file_size = log_file.stat().st_size
                log_file.unlink()
                removed_count += 1
                freed_mb += file_size / (1024 * 1024)
        
        if removed_count > 0:
            text = f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {removed_count} —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤\n"
            text += f"üíæ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {freed_mb:.1f}MB –º–µ—Å—Ç–∞"
        else:
            text = "üìã –°—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        
        await message.answer(text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤: {str(e)}")
