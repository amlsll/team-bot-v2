"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
"""

import os
import sys
import signal
import asyncio
import logging
from datetime import datetime
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command

from ..services.acl import require_admin

logger = logging.getLogger(__name__)

router = Router()


@router.message(Command("adm_restart"))
@require_admin
async def cmd_restart_bot(message: Message):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await message.reply("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        await asyncio.sleep(1)
        
        logger.info(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–æ–º {message.from_user.id}")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        restart_flag = os.path.join(os.path.dirname(__file__), '../../.restart_required')
        with open(restart_flag, 'w') as f:
            f.write(f"Restart initiated by admin {message.from_user.id} at {datetime.now().isoformat()}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        # –í–Ω–µ—à–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —ç—Ç–æ—Ç —Å–∏–≥–Ω–∞–ª –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞
        os.kill(os.getpid(), signal.SIGTERM)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {e}")


@router.message(Command("adm_shutdown"))
@require_admin
async def cmd_shutdown_bot(message: Message):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞."""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await message.reply("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è  
        await asyncio.sleep(1)
        
        logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞ –∞–¥–º–∏–Ω–æ–º {message.from_user.id}")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        shutdown_flag = os.path.join(os.path.dirname(__file__), '../../.shutdown_required')
        with open(shutdown_flag, 'w') as f:
            f.write(f"Shutdown initiated by admin {message.from_user.id} at {datetime.now().isoformat()}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        os.kill(os.getpid(), signal.SIGTERM)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")


@router.message(Command("adm_status"))
@require_admin
async def cmd_bot_status(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞."""
    try:
        import psutil
        import platform
        from datetime import datetime
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        process = psutil.Process()
        memory_info = process.memory_info()
        
        # –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
        create_time = datetime.fromtimestamp(process.create_time())
        uptime = datetime.now() - create_time
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        cpu_percent = process.cpu_percent()
        memory_mb = memory_info.rss / (1024 * 1024)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥–∏
        restart_flag = os.path.join(os.path.dirname(__file__), '../../.restart_required')
        shutdown_flag = os.path.join(os.path.dirname(__file__), '../../.shutdown_required')
        
        restart_pending = os.path.exists(restart_flag)
        shutdown_pending = os.path.exists(shutdown_flag)
        
        response = f"""üìä **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞**

ü§ñ **–ü—Ä–æ—Ü–µ—Å—Å:**
‚Ä¢ PID: {os.getpid()}
‚Ä¢ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {create_time.strftime('%Y-%m-%d %H:%M:%S')}
‚Ä¢ Uptime: {str(uptime).split('.')[0]}
‚Ä¢ CPU: {cpu_percent:.1f}%
‚Ä¢ RAM: {memory_mb:.1f} MB

üñ•Ô∏è **–°–∏—Å—Ç–µ–º–∞:**
‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.system()} {platform.release()}
‚Ä¢ Python: {platform.python_version()}
‚Ä¢ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {platform.machine()}

üîß **–°–æ—Å—Ç–æ—è–Ω–∏–µ:**
{"‚ö†Ô∏è –û–∂–∏–¥–∞–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞" if restart_pending else ""}
{"üõë –û–∂–∏–¥–∞–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏" if shutdown_pending else ""}
{"‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ" if not restart_pending and not shutdown_pending else ""}

üéõÔ∏è **–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/adm_restart` ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
‚Ä¢ `/adm_shutdown` ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
‚Ä¢ `/adm_update_check` ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        
        await message.reply(response)
        
    except ImportError:
        # –ï—Å–ª–∏ psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        response = f"""üìä **–ë–∞–∑–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞**

ü§ñ **–ü—Ä–æ—Ü–µ—Å—Å:** PID {os.getpid()}
‚ö†Ô∏è –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: `pip install psutil`

üéõÔ∏è **–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/adm_restart` ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
‚Ä¢ `/adm_shutdown` ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∫–∞"""
        
        await message.reply(response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")
