"""
–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ /adm_rematch –¥–ª—è —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥.
"""

from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command

from ..services.acl import require_admin
from ..services.storage import Storage

router = Router()


@router.message(Command("adm_rematch"))
@require_admin
async def cmd_adm_rematch(message: Message):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã."""
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()
    if len(args) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /adm_rematch <team_id> [--front]")
        return
    
    team_id = args[1]
    add_to_front = "--front" in args
    
    storage = Storage()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    team = storage.get_team(team_id)
    if not team:
        await message.reply(f"–ö–æ–º–∞–Ω–¥–∞ {team_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    if team['status'] != 'active':
        await message.reply(f"–ö–æ–º–∞–Ω–¥–∞ {team_id} —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    members = team['members'].copy()
    
    # –†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    store = storage.load()
    
    # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
    team['status'] = 'archived'
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    for tg_id in members:
        storage.set_user_status(tg_id, 'waiting', None)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å
    if add_to_front:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –æ—á–µ—Ä–µ–¥–∏ (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫)
        for tg_id in reversed(members):
            if tg_id not in store['queue']:
                store['queue'].insert(0, tg_id)
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏
        for tg_id in members:
            if tg_id not in store['queue']:
                store['queue'].append(tg_id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    storage.save(store)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    position_text = "–≤ –Ω–∞—á–∞–ª–æ" if add_to_front else "–≤ –∫–æ–Ω–µ—Ü"
    response = f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ {team_id} —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞.\n"
    response += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ ({len(members)}) –¥–æ–±–∞–≤–ª–µ–Ω—ã {position_text} –æ—á–µ—Ä–µ–¥–∏."
    
    await message.reply(response)
