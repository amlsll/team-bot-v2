"""
–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ /adm_stats –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
"""

from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command

from ..services.acl import require_admin
from ..services.storage import Storage

router = Router()


async def get_stats_response():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    storage = Storage()
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    queue_size = storage.get_queue_size()
    active_teams_count = storage.get_active_teams_count()
    avg_team_size = storage.get_active_teams_avg_size()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 username –≤ –æ—á–µ—Ä–µ–¥–∏
    queue_usernames = storage.get_queue_usernames(limit=10)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**\n\n"
    response += f"‚è≥ **–û–∂–∏–¥–∞—é—â–∏—Ö –≤ –æ—á–µ—Ä–µ–¥–∏:** {queue_size}\n"
    response += f"üèÜ **–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:** {active_teams_count}\n"
    response += f"üìà **–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã:** {avg_team_size:.1f}\n\n"
    
    if queue_usernames:
        response += "üë• **–ü–µ—Ä–≤—ã–µ –≤ –æ—á–µ—Ä–µ–¥–∏:**\n"
        for i, username in enumerate(queue_usernames, 1):
            response += f"{i}. {username}\n"
    else:
        response += "üë• **–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞**\n"
    
    return response

@router.message(Command("adm_stats"))
@require_admin
async def cmd_adm_stats(message: Message):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    response = await get_stats_response()
    await message.reply(response)
