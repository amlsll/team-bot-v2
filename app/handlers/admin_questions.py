"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
"""

from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command

from ..services.storage import Storage
from ..services.acl import require_admin

router = Router()


@router.message(Command("answer"))
@require_admin
async def cmd_answer(message: Message):
    """–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not message.text:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: /answer <ID_–≤–æ–ø—Ä–æ—Å–∞> <—Ç–µ–∫—Å—Ç_–æ—Ç–≤–µ—Ç–∞>")
        return
    
    parts = message.text.split(' ', 2)
    if len(parts) < 3:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: /answer <ID_–≤–æ–ø—Ä–æ—Å–∞> <—Ç–µ–∫—Å—Ç_–æ—Ç–≤–µ—Ç–∞>")
        return
    
    question_id = parts[1]
    answer_text = parts[2]
    
    storage = Storage()
    question = storage.get_question(question_id)
    
    if not question:
        await message.reply(f"‚ùå –í–æ–ø—Ä–æ—Å —Å ID {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    if question['answered']:
        await message.reply(f"‚ùå –ù–∞ –≤–æ–ø—Ä–æ—Å {question_id} —É–∂–µ –æ—Ç–≤–µ—á–µ–Ω–æ.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    success = storage.answer_question(question_id, answer_text, message.from_user.id)
    
    if success:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await message.bot.send_message(
                question['user_id'],
                f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{answer_text}"
            )
            await message.reply(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –≤–æ–ø—Ä–æ—Å {question_id}")
        except Exception as e:
            await message.reply(f"‚ùå –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
    else:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å {question_id}")


@router.message(Command("questions"))
@require_admin  
async def cmd_questions(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."""
    storage = Storage()
    questions = storage.get_unanswered_questions()
    
    if not questions:
        await message.reply("üìã –ù–µ—Ç –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return
    
    text = "üìã –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
    for question in questions[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 –≤–æ–ø—Ä–æ—Å–æ–≤
        user_mention = f"@{question['username']}" if question['username'] else f"ID {question['user_id']}"
        question_preview = question['text'][:100] + ("..." if len(question['text']) > 100 else "")
        text += f"üîπ {question['id']} –æ—Ç {user_mention}:\n{question_preview}\n\n"
    
    if len(questions) > 10:
        text += f"... –∏ –µ—â–µ {len(questions) - 10} –≤–æ–ø—Ä–æ—Å–æ–≤"
    
    await message.reply(text)


@router.message(Command("question"))
@require_admin
async def cmd_question_details(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞."""
    if not message.text:
        await message.reply("‚ùå –£–∫–∞–∂–∏ ID –≤–æ–ø—Ä–æ—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π: /question <ID_–≤–æ–ø—Ä–æ—Å–∞>")
        return
    
    parts = message.text.split(' ', 1)
    if len(parts) < 2:
        await message.reply("‚ùå –£–∫–∞–∂–∏ ID –≤–æ–ø—Ä–æ—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π: /question <ID_–≤–æ–ø—Ä–æ—Å–∞>")
        return
    
    question_id = parts[1]
    storage = Storage()
    question = storage.get_question(question_id)
    
    if not question:
        await message.reply(f"‚ùå –í–æ–ø—Ä–æ—Å —Å ID {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    user_mention = f"@{question['username']}" if question['username'] else f"ID {question['user_id']}"
    status = "‚úÖ –û—Ç–≤–µ—á–µ–Ω–æ" if question['answered'] else "‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞"
    
    text = f"üìã –í–æ–ø—Ä–æ—Å {question['id']}\n\n"
    text += f"üë§ –û—Ç: {user_mention}\n"
    text += f"üìÖ –°–æ–∑–¥–∞–Ω: {question['created_at']}\n"
    text += f"üìù –°—Ç–∞—Ç—É—Å: {status}\n\n"
    text += f"‚ùì –í–æ–ø—Ä–æ—Å:\n{question['text']}\n"
    
    if question['answered']:
        text += f"\nüí¨ –û—Ç–≤–µ—Ç:\n{question['answer']}\n"
        text += f"üìÖ –û—Ç–≤–µ—á–µ–Ω–æ: {question['answered_at']}"
    else:
        text += f"\nüí° –î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π: /answer {question_id} <—Ç–µ–∫—Å—Ç_–æ—Ç–≤–µ—Ç–∞>"
    
    await message.reply(text)
