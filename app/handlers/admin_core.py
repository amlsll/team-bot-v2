"""
–û—Å–Ω–æ–≤–Ω—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã: /admin <code>, /logout, ACL.
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

from ..services.acl import require_admin, verify_admin_code, is_admin
from ..services.storage import Storage

router = Router()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤
ADMIN_SUCCESS_TEXT = "–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ã–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ! üëë"
ADMIN_INVALID_CODE_TEXT = "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
LOGOUT_SUCCESS_TEXT = "–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–Ω—è—Ç—ã."
LOGOUT_NOT_ADMIN_TEXT = "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."


@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin <code>."""
    if not message.from_user:
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin <–∫–æ–¥>")
        return
    
    code = args[1]
    tg_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
    if not verify_admin_code(code):
        await message.reply(ADMIN_INVALID_CODE_TEXT)
        return
    
    # –í—ã–¥–∞–µ–º –ø—Ä–∞–≤–∞
    storage = Storage()
    storage.set_admin(tg_id, True)
    
    await message.reply(ADMIN_SUCCESS_TEXT)


@router.message(Command("logout"))
async def cmd_logout(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /logout."""
    if not message.from_user:
        return
    
    tg_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∞–≤–∞
    if not is_admin(tg_id):
        await message.reply(LOGOUT_NOT_ADMIN_TEXT)
        return
    
    # –°–Ω–∏–º–∞–µ–º –ø—Ä–∞–≤–∞ (—Ç–æ–ª—å–∫–æ runtime, –Ω–µ –∏–∑ env)
    storage = Storage()
    storage.set_admin(tg_id, False)
    
    await message.reply(LOGOUT_SUCCESS_TEXT)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤ –æ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –∫–æ–º–∞–Ω–¥
@router.callback_query(F.data.startswith("team_confirm:"))
async def callback_team_confirm(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–Ø –≤ –∫–æ–º–∞–Ω–¥–µ ‚úÖ'."""
    team_id = callback.data.split(":", 1)[1]
    
    await callback.answer("–û—Ç–ª–∏—á–Ω–æ! –£–¥–∞—á–∏ –≤ –∫–æ–º–∞–Ω–¥–µ! üöÄ")
    
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–º–µ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–∏—è


@router.callback_query(F.data.startswith("team_problem:"))
async def callback_team_problem(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–±–ª–µ–º–∞/–∑–∞–º–µ–Ω–∞'."""
    if not callback.from_user:
        return
    
    team_id = callback.data.split(":", 1)[1]
    username = callback.from_user.username or "–±–µ–∑_username"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–ø–æ—Ä—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
    from ..services.notify import NotificationService
    notify_service = NotificationService(callback.bot)
    
    report_text = f"üö® –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π {team_id}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {callback.from_user.id})"
    
    success = await notify_service.send_to_moderators(report_text)
    
    if success:
        await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º –Ω–∞–ø—Ä—è–º—É—é.")
