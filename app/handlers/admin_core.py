"""
–û—Å–Ω–æ–≤–Ω—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã: /admin <code>, /logout, ACL.
"""

import os
import asyncio
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

from ..services.acl import require_admin, verify_admin_code, is_admin, is_admin_by_env
from ..services.storage import Storage
from ..services.navigation import nav
from ..services.message_manager import message_manager

router = Router()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤
ADMIN_SUCCESS_TEXT = "–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ã–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ! üëë"
ADMIN_INVALID_CODE_TEXT = "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
LOGOUT_SUCCESS_TEXT = "–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–Ω—è—Ç—ã."
LOGOUT_NOT_ADMIN_TEXT = "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."

def get_admin_panel_text(user_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏."""
    from datetime import datetime
    storage = Storage()
    sessions = storage.get_admin_sessions()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
    current_session = sessions.get(user_id, {})
    login_time = current_session.get('last_login', '')
    login_count = current_session.get('login_count', 0)
    
    if login_time:
        try:
            login_dt = datetime.fromisoformat(login_time)
            login_str = login_dt.strftime('%H:%M')
        except:
            login_str = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    else:
        login_str = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    
    text = f"""üëë <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

üîê –í—ã –≤–æ—à–ª–∏ –≤ {login_str} (—Å–µ—Å—Å–∏—è #{login_count})
üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤: {len(sessions)}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
    
    return text

ADMIN_PANEL_TEXT = """üëë <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""


@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin <code>."""
    if not message.from_user:
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin <–∫–æ–¥>")
        return
    
    code = args[1]
    tg_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
    if not verify_admin_code(code):
        await message.reply(ADMIN_INVALID_CODE_TEXT)
        return
    
    # –í—ã–¥–∞–µ–º –ø—Ä–∞–≤–∞
    storage = Storage()
    storage.set_admin(tg_id, True)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    success_msg = await message.reply("üîê –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–¥...")
    await asyncio.sleep(0.5)
    await success_msg.edit_text("‚úÖ –ö–æ–¥ –≤–µ—Ä–Ω—ã–π! –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤...")
    await asyncio.sleep(0.5)
    await success_msg.edit_text(f"{ADMIN_SUCCESS_TEXT}\n\nüöÄ –û—Ç–∫—Ä—ã–≤–∞—é –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å...")
    await asyncio.sleep(1)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å
    await show_admin_panel(message.bot, message.chat.id, tg_id)


@router.message(Command("logout"))
async def cmd_logout(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /logout."""
    if not message.from_user:
        return
    
    tg_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∞–≤–∞
    if not is_admin(tg_id):
        await message.reply(LOGOUT_NOT_ADMIN_TEXT)
        return
    
    # –°–Ω–∏–º–∞–µ–º –ø—Ä–∞–≤–∞ (—Ç–æ–ª—å–∫–æ runtime, –Ω–µ –∏–∑ env)
    storage = Storage()
    storage.set_admin(tg_id, False)
    
    await message.reply(LOGOUT_SUCCESS_TEXT)


async def show_admin_panel(bot, chat_id: int, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    keyboard = nav.create_simple_keyboard_with_back([
        ("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "admin_stats"),
        ("üîÑ –ü—Ä–æ–≤–µ—Å—Ç–∏ –º–∞—Ç—á–∏–Ω–≥", "admin_match"),
        ("üí• –†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É", "admin_rematch_input"),
        ("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", "admin_broadcast_input"),
        ("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", "admin_update_check"),
        ("üîß –ü—Ä–∏–º–µ–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", "admin_update_apply"),
        ("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", "admin_restart"),
        ("‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", "admin_system_status"),
        ("üîê –°–µ—Å—Å–∏–∏", "admin_sessions_view"),
        ("üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏", "admin_logout")
    ], None)  # –ù–µ—Ç –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏
    
    panel_text = get_admin_panel_text(user_id)
    await message_manager.send_and_store(bot, chat_id, panel_text, reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏
@router.callback_query(F.data == "admin_stats")
async def callback_admin_stats(callback: CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    user_id = callback.from_user.id if callback.from_user else None
    import logging
    logging.error(f"üîç –û–¢–õ–ê–î–ö–ê admin_stats: user_id={user_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞–ø—Ä—è–º—É—é
    from ..services.storage import Storage
    storage = Storage()
    data = storage.load()
    logging.error(f"üîç –û–¢–õ–ê–î–ö–ê: admins –≤ storage = {data.get('admins', {})}")
    logging.error(f"üîç –û–¢–õ–ê–î–ö–ê: is_admin({user_id}) = {is_admin(user_id) if user_id else False}")
    
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        from .admin_stats import get_stats_response
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
        response = await get_stats_response()
        await message_manager.edit_and_store(callback, response)
        await callback.answer()
        
    except Exception as e:
        import logging
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ admin_stats callback: {e}")
        await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


@router.callback_query(F.data == "admin_match")
async def callback_admin_match(callback: CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–∞—Ç—á–∏–Ω–≥–∞."""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        from .admin_match import cmd_adm_match
        # –°–æ–∑–¥–∞–µ–º mock —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã
        class MockMessage:
            def __init__(self, callback_query):
                self.from_user = callback_query.from_user
                self.chat = callback_query.message.chat
                self.text = "/adm_match"
                self.bot = callback_query.bot
            
            async def reply(self, text, **kwargs):
                return await message_manager.edit_and_store(callback, text, **kwargs)
        
        mock_message = MockMessage(callback)
        await cmd_adm_match(mock_message)
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


@router.callback_query(F.data == "admin_rematch_input")
async def callback_admin_rematch_input(callback: CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã - –∑–∞–ø—Ä–æ—Å ID –∫–æ–º–∞–Ω–¥—ã."""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        text = """üí• **–†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã**

–í–≤–µ–¥–∏—Ç–µ ID –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è:
–§–æ—Ä–º–∞—Ç: `/adm_rematch team_id [--front]`

–û–ø—Ü–∏–∏:
‚Ä¢ `--front` - –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –Ω–∞—á–∞–ª–æ –æ—á–µ—Ä–µ–¥–∏

–ü—Ä–∏–º–µ—Ä: `/adm_rematch TEAM_001 --front`"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–∞–Ω–µ–ª–∏
        keyboard = nav.create_simple_keyboard_with_back([
            ("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–∞–Ω–µ–ª–∏", "back_to_admin_panel")
        ], None)
        
        await message_manager.edit_and_store(callback, text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


@router.callback_query(F.data == "admin_broadcast_input")
async def callback_admin_broadcast_input(callback: CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é."""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        text = """üì¢ **–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π**

–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
`/adm_broadcast <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>`

–ü—Ä–∏–º–µ—Ä:
`/adm_broadcast –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ù–æ–≤–æ—Å—Ç–∏ –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤.`

–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é:
‚Ä¢ –û–∂–∏–¥–∞—é—â–∏–º –≤ –æ—á–µ—Ä–µ–¥–∏
‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–∞–Ω–¥"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–∞–Ω–µ–ª–∏
        keyboard = nav.create_simple_keyboard_with_back([
            ("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–∞–Ω–µ–ª–∏", "back_to_admin_panel")
        ], None)
        
        await message_manager.edit_and_store(callback, text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


@router.callback_query(F.data == "admin_update_check")
async def callback_admin_update_check(callback: CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        from .auto_update import cmd_check_updates
        # –°–æ–∑–¥–∞–µ–º mock —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã
        class MockMessage:
            def __init__(self, callback_query):
                self.from_user = callback_query.from_user
                self.chat = callback_query.message.chat
                self.text = "/adm_update_check"
                self.bot = callback_query.bot
            
            async def reply(self, text, **kwargs):
                return await message_manager.edit_and_store(callback, text, **kwargs)
        
        mock_message = MockMessage(callback)
        await cmd_check_updates(mock_message)
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


@router.callback_query(F.data == "admin_update_apply")
async def callback_admin_update_apply(callback: CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        from .auto_update import cmd_apply_updates
        # –°–æ–∑–¥–∞–µ–º mock —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã
        class MockMessage:
            def __init__(self, callback_query):
                self.from_user = callback_query.from_user
                self.chat = callback_query.message.chat
                self.text = "/adm_update_apply"
                self.bot = callback_query.bot
            
            async def reply(self, text, **kwargs):
                return await message_manager.edit_and_store(callback, text, **kwargs)
        
        mock_message = MockMessage(callback)
        await cmd_apply_updates(mock_message)
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


@router.callback_query(F.data == "admin_restart")
async def callback_admin_restart(callback: CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        from .admin_restart import cmd_restart_bot
        # –°–æ–∑–¥–∞–µ–º mock —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã
        class MockMessage:
            def __init__(self, callback_query):
                self.from_user = callback_query.from_user
                self.chat = callback_query.message.chat
                self.text = "/adm_restart"
                self.bot = callback_query.bot
            
            async def reply(self, text, **kwargs):
                return await message_manager.edit_and_store(callback, text, **kwargs)
        
        mock_message = MockMessage(callback)
        await cmd_restart_bot(mock_message)
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


@router.callback_query(F.data == "admin_system_status")
async def callback_admin_system_status(callback: CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã."""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        from .admin_restart import cmd_bot_status
        # –°–æ–∑–¥–∞–µ–º mock —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã
        class MockMessage:
            def __init__(self, callback_query):
                self.from_user = callback_query.from_user
                self.chat = callback_query.message.chat
                self.text = "/adm_status"
                self.bot = callback_query.bot
            
            async def reply(self, text, **kwargs):
                return await message_manager.edit_and_store(callback, text, **kwargs)
        
        mock_message = MockMessage(callback)
        await cmd_bot_status(mock_message)
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


@router.callback_query(F.data == "admin_sessions_view")
async def callback_admin_sessions_view(callback: CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–µ—Å—Å–∏–π."""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        storage = Storage()
        sessions = storage.get_admin_sessions()
        
        if not sessions:
            text = "üîê **–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏**\n\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π"
            keyboard = nav.create_simple_keyboard_with_back([
                ("üè† –ö –ø–∞–Ω–µ–ª–∏", "back_to_admin_panel")
            ], None)
        else:
            from datetime import datetime
            text = "üîê **–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ —Å–µ—Å—Å–∏–∏:**\n\n"
            
            for tg_id, info in sessions.items():
                last_login = info.get('last_login', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                login_count = info.get('login_count', 0)
                
                if last_login != '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
                    try:
                        login_dt = datetime.fromisoformat(last_login)
                        last_login_str = login_dt.strftime('%d.%m %H:%M')
                    except:
                        last_login_str = last_login
                else:
                    last_login_str = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                current_mark = " (—ç—Ç–æ –≤—ã)" if tg_id == callback.from_user.id else ""
                
                text += f"üë§ **ID {tg_id}**{current_mark}\n"
                text += f"‚Ä¢ –í—Ö–æ–¥: {last_login_str}\n"
                text += f"‚Ä¢ –°–µ—Å—Å–∏–π: {login_count}\n\n"
            
            keyboard = nav.create_simple_keyboard_with_back([
                ("üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ", "logout_all_sessions"),
                ("üè† –ö –ø–∞–Ω–µ–ª–∏", "back_to_admin_panel")
            ], None)
        
        await message_manager.edit_and_store(callback, text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


@router.callback_query(F.data == "admin_logout")
async def callback_admin_logout(callback: CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–¥–º–∏–Ω–∫–∏."""
    if not callback.from_user:
        return
    
    tg_id = callback.from_user.id
    
    if not is_admin(tg_id):
        await message_manager.edit_and_store(callback, LOGOUT_NOT_ADMIN_TEXT)
        await callback.answer()
        return
    
    storage = Storage()
    storage.set_admin(tg_id, False)
    
    await message_manager.edit_and_store(callback, LOGOUT_SUCCESS_TEXT)
    await callback.answer()


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏
@router.message(Command("admin_panel"))
@require_admin
async def cmd_admin_panel(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å."""
    if not message.from_user:
        return
    
    await show_admin_panel(message.bot, message.chat.id, message.from_user.id)


# –ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
@router.message(Command("ap"))
@require_admin
async def cmd_admin_panel_quick(message: Message):
    """–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏."""
    if not message.from_user:
        return
    
    await show_admin_panel(message.bot, message.chat.id, message.from_user.id)


# –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —á–∞—Å—Ç—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
@router.message(Command("qs"))  # Quick Stats
@require_admin
async def cmd_quick_stats(message: Message):
    """–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞."""
    if not message.from_user:
        return
    
    try:
        from .admin_stats import cmd_adm_stats
        await cmd_adm_stats(message)
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@router.message(Command("qm"))  # Quick Match
@require_admin
async def cmd_quick_match(message: Message):
    """–ë—ã—Å—Ç—Ä—ã–π –º–∞—Ç—á–∏–Ω–≥."""
    if not message.from_user:
        return
    
    try:
        from .admin_match import cmd_adm_match
        await cmd_adm_match(message)
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@router.message(Command("help_admin"))
@require_admin
async def cmd_admin_help(message: Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω—Å–∫–∏–º –∫–æ–º–∞–Ω–¥–∞–º."""
    help_text = """üîß **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω—Å–∫–∏–º –∫–æ–º–∞–Ω–¥–∞–º**

üìã **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/admin <–∫–æ–¥>` ‚Äî –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
‚Ä¢ `/ap` ‚Äî –∞–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å
‚Ä¢ `/logout` ‚Äî –≤—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∫–∏

‚ö° **–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/qs` ‚Äî –±—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ `/qm` ‚Äî –±—ã—Å—Ç—Ä—ã–π –º–∞—Ç—á–∏–Ω–≥
‚Ä¢ `/admin_sessions` ‚Äî –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏

üõ†Ô∏è **–ü–æ–ª–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/adm_stats` ‚Äî –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ `/adm_match` ‚Äî –ø—Ä–æ–≤–µ—Å—Ç–∏ –º–∞—Ç—á–∏–Ω–≥
‚Ä¢ `/adm_broadcast <—Ç–µ–∫—Å—Ç>` ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞
‚Ä¢ `/adm_rematch <id> [--front]` ‚Äî —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å
‚Ä¢ `/adm_restart` ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
‚Ä¢ `/adm_status` ‚Äî —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

üîç **–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:**
‚Ä¢ `/admin_debug` ‚Äî –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∞–≤
‚Ä¢ `/health` ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
‚Ä¢ `/metrics` ‚Äî –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    await message.reply(help_text)


@router.message(Command("admin_debug"))
async def cmd_admin_debug(message: Message):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –∞–¥–º–∏–Ω–∫–æ–π."""
    if not message.from_user:
        return
    
    tg_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø—Ä–∞–≤
    is_admin_env = is_admin_by_env(tg_id)
    
    storage = Storage()
    is_admin_storage = storage.is_admin(tg_id)
    is_admin_final = is_admin(tg_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    admin_code_set = bool(os.getenv('ADMIN_CODE', ''))
    admins_env = os.getenv('ADMINS', '')
    
    debug_text = f"""üîç **–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤**

üë§ **–í–∞—à ID:** `{tg_id}`

üîê **–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞:**
‚Ä¢ –ò–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π ADMINS: {'‚úÖ' if is_admin_env else '‚ùå'}
‚Ä¢ –ò–∑ runtime storage: {'‚úÖ' if is_admin_storage else '‚ùå'}
‚Ä¢ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ' if is_admin_final else '‚ùå'}

‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ ADMIN_CODE —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {'‚úÖ' if admin_code_set else '‚ùå'}
‚Ä¢ ADMINS –≤ env: `{admins_env if admins_env else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`

üí° **–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞:**
1. –ó–∞–¥–∞–π—Ç–µ ADMIN_CODE –≤ .env —Ñ–∞–π–ª–µ
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin <–≤–∞—à_–∫–æ–¥>
3. –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à ID –≤ ADMINS –≤ .env"""
    
    await message.reply(debug_text)


@router.message(Command("admin_sessions"))
@require_admin
async def cmd_admin_sessions(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ —Å–µ—Å—Å–∏–∏."""
    if not message.from_user:
        return
    
    storage = Storage()
    sessions = storage.get_admin_sessions()
    
    if not sessions:
        await message.reply("üîê –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π")
        return
    
    from datetime import datetime
    text = "üîê **–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ —Å–µ—Å—Å–∏–∏:**\n\n"
    
    for tg_id, info in sessions.items():
        last_login = info.get('last_login', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        login_count = info.get('login_count', 0)
        
        if last_login != '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
            try:
                login_dt = datetime.fromisoformat(last_login)
                last_login_str = login_dt.strftime('%d.%m.%Y %H:%M')
            except:
                last_login_str = last_login
        else:
            last_login_str = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        current_mark = " (—ç—Ç–æ –≤—ã)" if tg_id == message.from_user.id else ""
        
        text += f"üë§ **ID {tg_id}**{current_mark}\n"
        text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: {last_login_str}\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ –≤—Ö–æ–¥–æ–≤: {login_count}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
    keyboard = nav.create_simple_keyboard_with_back([
        ("üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏", "logout_all_sessions"),
        ("üè† –ö –ø–∞–Ω–µ–ª–∏", "back_to_admin_panel")
    ], None)
    
    await message.reply(text, reply_markup=keyboard)


@router.callback_query(F.data == "logout_all_sessions")
async def callback_logout_all_sessions(callback: CallbackQuery):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—Å–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ —Å–µ—Å—Å–∏–∏."""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        storage = Storage()
        store = storage.load()
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏
        for tg_id in list(store['admins'].keys()):
            storage.set_admin(tg_id, False)
        
        await message_manager.edit_and_store(callback, "üö™ –í—Å–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ —Å–µ—Å—Å–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.\n\n–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin <–∫–æ–¥>")
        await callback.answer("–í—Å–µ —Å–µ—Å—Å–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


@router.callback_query(F.data == "back_to_admin_panel")
async def callback_back_to_admin_panel(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–π –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏."""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å
        keyboard = nav.create_simple_keyboard_with_back([
            ("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "admin_stats"),
            ("üîÑ –ü—Ä–æ–≤–µ—Å—Ç–∏ –º–∞—Ç—á–∏–Ω–≥", "admin_match"),
            ("üí• –†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É", "admin_rematch_input"),
            ("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", "admin_broadcast_input"),
            ("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", "admin_update_check"),
            ("üîß –ü—Ä–∏–º–µ–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", "admin_update_apply"),
            ("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", "admin_restart"),
            ("‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", "admin_system_status"),
            ("üîê –°–µ—Å—Å–∏–∏", "admin_sessions_view"),
            ("üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏", "admin_logout")
        ], None)
        
        panel_text = get_admin_panel_text(callback.from_user.id)
        await message_manager.edit_and_store(callback, panel_text, reply_markup=keyboard)
        await callback.answer("üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤ –æ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –∫–æ–º–∞–Ω–¥
@router.callback_query(F.data.startswith("team_confirm:"))
async def callback_team_confirm(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–Ø –≤ –∫–æ–º–∞–Ω–¥–µ ‚úÖ'."""
    team_id = callback.data.split(":", 1)[1]
    
    await callback.answer("–û—Ç–ª–∏—á–Ω–æ! –£–¥–∞—á–∏ –≤ –∫–æ–º–∞–Ω–¥–µ! üöÄ")
    
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–º–µ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–∏—è


@router.callback_query(F.data.startswith("team_problem:"))
async def callback_team_problem(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–±–ª–µ–º–∞/–∑–∞–º–µ–Ω–∞'."""
    if not callback.from_user:
        return
    
    team_id = callback.data.split(":", 1)[1]
    username = callback.from_user.username or "–±–µ–∑_username"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–ø–æ—Ä—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
    from ..services.notify import NotificationService
    notify_service = NotificationService(callback.bot)
    
    report_text = f"üö® –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π {team_id}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {callback.from_user.id})"
    
    success = await notify_service.send_to_moderators(report_text)
    
    if success:
        await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º –Ω–∞–ø—Ä—è–º—É—é.")
