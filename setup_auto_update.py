#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
"""

import os
import sys
import secrets
from pathlib import Path


def generate_secret():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á."""
    return secrets.token_hex(32)


def update_env_file():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç .env —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
    env_path = Path('.env')
    
    if not env_path.exists():
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ env.sample")
        return False
    
    # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env
    with open(env_path, 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    has_auto_update = any('AUTO_UPDATE_ENABLED' in line for line in lines)
    
    if has_auto_update:
        print("‚ÑπÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ .env")
        return True
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
    secret = generate_secret()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    auto_update_config = f"""
# === –ù–ê–°–¢–†–û–ô–ö–ò –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–Ø ===

# –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ GitHub (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é false)
AUTO_UPDATE_ENABLED=true

# –í–µ—Ç–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é main)
UPDATE_BRANCH=main

# –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ GitHub webhook (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
GITHUB_WEBHOOK_SECRET={secret}
"""
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(env_path, 'a', encoding='utf-8') as f:
        f.write(auto_update_config)
    
    print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ .env")
    print(f"üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á: {secret}")
    print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ GitHub webhook")
    
    return True


def create_systemd_service():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä systemd —Å–µ—Ä–≤–∏—Å–∞."""
    project_path = Path.cwd().resolve()
    python_path = sys.executable
    
    service_content = f"""[Unit]
Description=Team Bot Auto Deploy Service
After=network.target

[Service]
Type=simple
User={os.getenv('USER', 'your_user')}
WorkingDirectory={project_path}
ExecStart={python_path} auto_deploy.py
Restart=always
RestartSec=10
Environment=PATH=/usr/bin:/usr/local/bin
Environment=PYTHONPATH={project_path}

[Install]
WantedBy=multi-user.target
"""
    
    service_path = Path('team-bot.service')
    with open(service_path, 'w', encoding='utf-8') as f:
        f.write(service_content)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Å–µ—Ä–≤–∏—Å–∞: {service_path}")
    print("üìù –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
    print(f"   sudo cp {service_path} /etc/systemd/system/")
    print("   sudo systemctl enable team-bot")
    print("   sudo systemctl start team-bot")


def create_docker_compose():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä docker-compose.yml."""
    compose_content = """version: '3.8'

services:
  team-bot:
    build: .
    restart: unless-stopped
    volumes:
      - .:/app
      - ./data:/app/data
    environment:
      - BOT_TOKEN=${BOT_TOKEN}
      - ADMIN_CODE=${ADMIN_CODE}
      - AUTO_UPDATE_ENABLED=true
      - UPDATE_BRANCH=main
      - GITHUB_WEBHOOK_SECRET=${GITHUB_WEBHOOK_SECRET}
      - USE_WEBHOOK=true
      - WEBHOOK_URL=${WEBHOOK_URL}
      - PORT=3000
    ports:
      - "3000:3000"
    networks:
      - bot-network

networks:
  bot-network:
    driver: bridge
"""
    
    dockerfile_content = """FROM python:3.11-slim

WORKDIR /app

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ git –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
RUN apt-get update && apt-get install -y git && rm -rf /var/lib/apt/lists/*

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
COPY . .

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
RUN mkdir -p /app/data

# –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–¥–µ–ø–ª–æ—è
CMD ["python", "auto_deploy.py"]
"""
    
    Path('docker-compose.yml').write_text(compose_content, encoding='utf-8')
    Path('Dockerfile').write_text(dockerfile_content, encoding='utf-8')
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ñ–∞–π–ª—ã Docker: docker-compose.yml, Dockerfile")


def print_webhook_instructions(secret):
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ GitHub webhook."""
    print("\nüîß –ù–ê–°–¢–†–û–ô–ö–ê GITHUB WEBHOOK:")
    print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
    print("2. Settings ‚Üí Webhooks ‚Üí Add webhook")
    print("3. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è:")
    print("   Payload URL: https://yourdomain.com/github-webhook")
    print("   Content type: application/json")
    print(f"   Secret: {secret}")
    print("   Events: Just the push event")
    print("4. –ù–∞–∂–º–∏—Ç–µ Add webhook")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
    print("üöÄ –ù–ê–°–¢–†–û–ô–ö–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø TEAM-BOT")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not Path('app/bot.py').exists():
        print("‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ team-bot")
        return 1
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª
        if not update_env_file():
            return 1
        
        print("\nüìã –í–´–ë–ï–†–ò–¢–ï –°–ü–û–°–û–ë –î–ï–ü–õ–û–Ø:")
        print("1. Systemd —Å–µ—Ä–≤–∏—Å (Linux)")
        print("2. Docker compose")
        print("3. –¢–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ .env (—Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫)")
        
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()
        
        if choice == '1':
            create_systemd_service()
        elif choice == '2':
            create_docker_compose()
        elif choice == '3':
            print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ .env –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        else:
            print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, —Å–æ–∑–¥–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ .env")
        
        # –ß–∏—Ç–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ .env –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        secret = None
        with open('.env', 'r') as f:
            for line in f:
                if line.startswith('GITHUB_WEBHOOK_SECRET='):
                    secret = line.split('=', 1)[1].strip()
                    break
        
        if secret:
            print_webhook_instructions(secret)
        
        print("\n‚úÖ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("\nüìö –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º. AUTO_UPDATE_GUIDE.md")
        print("\nüéõÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("   /adm_update_check - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        print("   /adm_update_apply - –ø—Ä–∏–º–µ–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        print("   /adm_restart - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
        print("   /adm_status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞")
        
        return 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
        return 1


if __name__ == '__main__':
    sys.exit(main())
