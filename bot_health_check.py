#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º.
–ó–∞–ø—É—Å–∫–∞—Ç—å —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º –±–æ—Ç–∞ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º.
"""

import asyncio
import os
import sys
import logging
from dotenv import load_dotenv
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def check_telegram_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API."""
    try:
        from aiogram import Bot
        
        token = os.getenv('BOT_TOKEN')
        if not token:
            logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return False
        
        bot = Bot(token=token)
        
        try:
            me = await bot.get_me()
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API —É—Å–ø–µ—à–Ω–æ: @{me.username} ({me.first_name})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
            webhook_info = await bot.get_webhook_info()
            if webhook_info.url:
                logger.warning(f"‚ö†Ô∏è –ê–∫—Ç–∏–≤–µ–Ω webhook: {webhook_info.url}")
                logger.info("–î–ª—è polling —Ä–µ–∂–∏–º–∞ webhook –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω")
            else:
                logger.info("‚úÖ Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {e}")
            return False
        finally:
            await bot.session.close()
            
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ aiogram: {e}")
        return False

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    required_vars = ['BOT_TOKEN']
    optional_vars = ['ADMIN_CODE', 'TEAM_BASE', 'ELASTIC_MAX', 'USE_WEBHOOK', 'WEBHOOK_URL', 'PORT']
    
    all_good = True
    
    for var in required_vars:
        value = os.getenv(var)
        if value:
            logger.info(f"‚úÖ {var}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            logger.error(f"‚ùå {var}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)")
            all_good = False
    
    for var in optional_vars:
        value = os.getenv(var)
        if value:
            logger.info(f"‚úÖ {var}: {value}")
        else:
            logger.info(f"‚ÑπÔ∏è {var}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)")
    
    return all_good

def check_file_permissions():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º."""
    logger.info("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")
    
    files_to_check = [
        'data.json',
        'bot.log'
    ]
    
    all_good = True
    
    for filename in files_to_check:
        filepath = Path(filename)
        
        if filepath.exists():
            if filepath.is_file() and os.access(filepath, os.R_OK | os.W_OK):
                logger.info(f"‚úÖ {filename}: –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è/–∑–∞–ø–∏—Å–∏")
            else:
                logger.error(f"‚ùå {filename}: –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
                all_good = False
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª
            try:
                filepath.touch()
                filepath.unlink()
                logger.info(f"‚úÖ {filename}: –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å")
            except Exception as e:
                logger.error(f"‚ùå {filename}: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å - {e}")
                all_good = False
    
    return all_good

def check_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –º–æ–¥—É–ª–µ–π."""
    logger.info("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    modules_to_check = [
        'aiogram',
        'aiohttp',
        'dotenv'
    ]
    
    all_good = True
    
    for module in modules_to_check:
        try:
            __import__(module)
            logger.info(f"‚úÖ {module}: –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        except ImportError as e:
            logger.error(f"‚ùå {module}: –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ - {e}")
            all_good = False
    
    return all_good

def check_running_processes():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞."""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
    
    try:
        from app.services.process_lock import check_running_instances
        
        running_instances = check_running_instances()
        
        if running_instances:
            logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(running_instances)} –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞:")
            for instance in running_instances:
                logger.warning(f"   PID: {instance['pid']} | –ö–æ–º–∞–Ω–¥–∞: {instance['cmdline']}")
            
            logger.warning("\nüîß –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
            logger.warning("   python stop_all_bots.py")
            logger.warning("   –∏–ª–∏: pkill -f 'team_bot|start_bot|python.*app'")
            
            return False
        else:
            logger.info("‚úÖ –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return True
            
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ process_lock: {e}")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
        return False

def check_app_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logger.info("üèóÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    required_files = [
        'app/__init__.py',
        'app/bot.py',
        'app/__main__.py',
        'app/handlers/user_start.py',
        'app/services/storage.py',
        'app/services/process_lock.py'
    ]
    
    all_good = True
    
    for filepath in required_files:
        if Path(filepath).exists():
            logger.info(f"‚úÖ {filepath}: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            logger.error(f"‚ùå {filepath}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
            all_good = False
    
    return all_good

async def test_start_handler():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ /start."""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ /start...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
        from app.handlers.user_start import cmd_start, router
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–æ—É—Ç–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        handlers = getattr(router, '_handlers', [])
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(handlers)} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ —Ä–æ—É—Ç–µ—Ä–µ")
        
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ /start: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    logger.info("üîß –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –±–æ—Ç–∞...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    checks = [
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", check_environment),
        ("–ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π", check_imports),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", check_app_structure),
        ("–§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞", check_file_permissions),
        ("–ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã", check_running_processes),
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram", check_telegram_connection),
        ("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start", test_start_handler),
    ]
    
    all_passed = True
    
    for check_name, check_func in checks:
        logger.info(f"\n--- {check_name} ---")
        try:
            if asyncio.iscoroutinefunction(check_func):
                result = await check_func()
            else:
                result = check_func()
            
            if not result:
                all_passed = False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ '{check_name}': {e}")
            all_passed = False
    
    logger.info("\n" + "="*50)
    if all_passed:
        logger.info("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.")
        return 0
    else:
        logger.error("üí• –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞.")
        return 1

if __name__ == '__main__':
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
