#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ webhook.
"""

import asyncio
import os
from dotenv import load_dotenv
from aiogram import Bot

async def clear_webhook():
    load_dotenv()
    token = os.getenv('BOT_TOKEN')
    
    if not token:
        print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    bot = Bot(token=token)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
        webhook_info = await bot.get_webhook_info()
        print(f"‚ÑπÔ∏è –¢–µ–∫—É—â–∏–π webhook: {webhook_info.url or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        
        if webhook_info.url:
            print("üßπ –£–¥–∞–ª—è–µ–º webhook...")
            await bot.delete_webhook(drop_pending_updates=True)
            print("‚úÖ Webhook —É–¥–∞–ª–µ–Ω")
        else:
            print("‚ÑπÔ∏è Webhook —É–∂–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â—ë —Ä–∞–∑
        webhook_info = await bot.get_webhook_info()
        print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: {webhook_info.url or 'webhook –æ—á–∏—â–µ–Ω'}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == '__main__':
    asyncio.run(clear_webhook())
