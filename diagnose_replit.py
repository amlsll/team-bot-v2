#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º team-bot –Ω–∞ Replit.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –ø—Ä–∏—á–∏–Ω—É, –ø–æ—á–µ–º—É –±–æ—Ç –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ /start.
"""

import os
import sys
import json
import asyncio
import logging
from pathlib import Path
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)

logger = logging.getLogger(__name__)

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ Replit."""
    print("üîç –ü–†–û–í–ï–†–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Replit –æ–∫—Ä—É–∂–µ–Ω–∏—è
    replit_vars = ['REPL_ID', 'REPL_SLUG', 'REPL_OWNER', 'REPLIT_DB_URL']
    is_replit = any(var in os.environ for var in replit_vars)
    
    if is_replit:
        print("‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ Replit –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        for var in replit_vars:
            value = os.getenv(var)
            if value:
                print(f"   {var}: {value}")
    else:
        print("‚ùå –û–∫—Ä—É–∂–µ–Ω–∏–µ Replit –ù–ï –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        print("   –í–æ–∑–º–æ–∂–Ω–æ, —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    current_dir = os.getcwd()
    print(f"üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_dir}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
    required_files = ['replit_start.py', 'requirements.txt', '.replit', 'replit.nix']
    missing_files = []
    
    for file in required_files:
        if os.path.exists(file):
            print(f"‚úÖ {file} –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"‚ùå {file} –ù–ï –Ω–∞–π–¥–µ–Ω")
            missing_files.append(file)
    
    if missing_files:
        print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
    
    return is_replit, missing_files

def check_env_variables():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    print("\nüîê –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª –µ—Å–ª–∏ –µ—Å—Ç—å
    load_dotenv()
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    critical_vars = {
        'BOT_TOKEN': '–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞',
        'ADMIN_CODE': '–ö–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
    }
    
    # –í–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Replit
    replit_vars = {
        'USE_WEBHOOK': '–†–µ–∂–∏–º webhook',
        'WEBHOOK_URL': 'URL –¥–ª—è webhook',
        'PORT': '–ü–æ—Ä—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞',
        'AUTO_UPDATE_ENABLED': '–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ',
        'UPDATE_BRANCH': '–í–µ—Ç–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
    }
    
    missing_critical = []
    
    print("üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï:")
    for var, desc in critical_vars.items():
        value = os.getenv(var)
        if value:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã —Ç–æ–∫–µ–Ω–∞
            if 'TOKEN' in var and len(value) > 10:
                display_value = f"{value[:6]}...{value[-6:]}"
            else:
                display_value = value[:20] + "..." if len(value) > 20 else value
            print(f"‚úÖ {var}: {display_value}")
        else:
            print(f"‚ùå {var}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù ({desc})")
            missing_critical.append(var)
    
    print("\nüü° –ù–ê–°–¢–†–û–ô–ö–ò REPLIT:")
    for var, desc in replit_vars.items():
        value = os.getenv(var)
        if value:
            print(f"‚úÖ {var}: {value}")
        else:
            print(f"‚ö†Ô∏è {var}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ({desc})")
    
    return missing_critical

def check_data_file():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö."""
    print("\nüìÑ –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–ê –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    data_file = Path('data.json')
    
    if not data_file.exists():
        print("‚ùå data.json –ù–ï –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        with open(data_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        print("‚úÖ data.json –Ω–∞–π–¥–µ–Ω –∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {len(data.get('users', {}))}")
        print(f"   –û—á–µ—Ä–µ–¥—å: {len(data.get('queue', []))}")
        print(f"   –ö–æ–º–∞–Ω–¥—ã: {len(data.get('teams', {}))}")
        print(f"   –ê–¥–º–∏–Ω—ã: {len(data.get('admins', {}))}")
        
        return True
        
    except json.JSONDecodeError as e:
        print(f"‚ùå data.json –ø–æ–≤—Ä–µ–∂–¥–µ–Ω: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è data.json: {e}")
        return False

async def test_bot_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API."""
    print("\nü§ñ –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö TELEGRAM")
    print("=" * 50)
    
    bot_token = os.getenv('BOT_TOKEN')
    if not bot_token:
        print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω - —Ç–µ—Å—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω")
        return False
    
    try:
        from aiogram import Bot
        bot = Bot(token=bot_token)
        
        print("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API...")
        me = await bot.get_me()
        
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        print(f"   –ò–º—è –±–æ—Ç–∞: @{me.username}")
        print(f"   ID: {me.id}")
        print(f"   –ü–æ–ª–Ω–æ–µ –∏–º—è: {me.first_name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
        webhook_info = await bot.get_webhook_info()
        if webhook_info.url:
            print(f"üåê Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_info.url}")
            print(f"   –û–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {webhook_info.pending_update_count}")
        else:
            print("üì° Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (polling —Ä–µ–∂–∏–º)")
        
        await bot.session.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def check_webhook_setup():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook."""
    print("\nüåê –ü–†–û–í–ï–†–ö–ê –ù–ê–°–¢–†–û–ï–ö WEBHOOK")
    print("=" * 50)
    
    use_webhook = os.getenv('USE_WEBHOOK', 'false').lower() == 'true'
    webhook_url = os.getenv('WEBHOOK_URL')
    port = os.getenv('PORT', '3000')
    
    print(f"–†–µ–∂–∏–º webhook: {'–í–ö–õ' if use_webhook else '–í–´–ö–õ'}")
    
    if use_webhook:
        if webhook_url:
            print(f"‚úÖ WEBHOOK_URL: {webhook_url}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç URL
            if 'repl.co' in webhook_url:
                print("‚úÖ URL –ø–æ—Ö–æ–∂ –Ω–∞ Replit URL")
            else:
                print("‚ö†Ô∏è URL –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ Replit URL")
            
            print(f"‚úÖ PORT: {port}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –æ–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            if not webhook_url.endswith('.repl.co'):
                print("‚ö†Ô∏è WEBHOOK_URL –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ .repl.co –¥–ª—è Replit")
            
        else:
            print("‚ùå WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è webhook —Ä–µ–∂–∏–º–∞)")
            return False
    else:
        print("üì° –†–µ–∂–∏–º polling - webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è")
    
    return True

def check_replit_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è Replit —Ñ–∞–π–ª—ã."""
    print("\nüìã –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í REPLIT")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .replit
    replit_file = Path('.replit')
    if replit_file.exists():
        print("‚úÖ .replit –Ω–∞–π–¥–µ–Ω")
        try:
            content = replit_file.read_text()
            if 'replit_start.py' in content:
                print("‚úÖ .replit –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ replit_start.py")
            else:
                print("‚ö†Ô∏è .replit –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å .replit: {e}")
    else:
        print("‚ùå .replit –ù–ï –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º replit.nix
    nix_file = Path('replit.nix')
    if nix_file.exists():
        print("‚úÖ replit.nix –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚ùå replit.nix –ù–ï –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º requirements.txt
    req_file = Path('requirements.txt')
    if req_file.exists():
        print("‚úÖ requirements.txt –Ω–∞–π–¥–µ–Ω")
        try:
            content = req_file.read_text()
            if 'aiogram' in content:
                print("‚úÖ aiogram –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö")
            else:
                print("‚ùå aiogram –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å requirements.txt: {e}")
    else:
        print("‚ùå requirements.txt –ù–ï –Ω–∞–π–¥–µ–Ω")

def generate_recommendations(missing_critical, missing_files, webhook_ok, bot_connection_ok):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º."""
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ")
    print("=" * 50)
    
    if missing_critical:
        print("üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
        for var in missing_critical:
            if var == 'BOT_TOKEN':
                print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BOT_TOKEN –≤ Secrets Replit:")
                print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ üîí Secrets –≤ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏ Replit")
                print("   2. –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á: BOT_TOKEN")
                print("   3. –ó–Ω–∞—á–µ–Ω–∏–µ: —Ç–æ–∫–µ–Ω –æ—Ç @BotFather")
            elif var == 'ADMIN_CODE':
                print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ADMIN_CODE –≤ Secrets Replit:")
                print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ üîí Secrets –≤ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏ Replit")
                print("   2. –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á: ADMIN_CODE")
                print("   3. –ó–Ω–∞—á–µ–Ω–∏–µ: –ª—é–±–æ–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
    
    if missing_files:
        print("\nüü° –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –§–ê–ô–õ–´:")
        print("‚ùå –í–æ–∑–º–æ–∂–Ω–æ, —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é")
        print("   –ü–µ—Ä–µ—Å–æ–∑–¥–∞–π—Ç–µ Repl –∏–∑ GitHub —Å –ø–æ–ª–Ω—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º")
    
    if not webhook_ok:
        print("\nüåê –ü–†–û–ë–õ–ï–ú–´ –° WEBHOOK:")
        print("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook –≤ Secrets:")
        print("   USE_WEBHOOK=true")
        print("   WEBHOOK_URL=https://–≤–∞—à-repl-name.–≤–∞—à-username.repl.co")
        print("   PORT=3000")
    
    if not bot_connection_ok:
        print("\nü§ñ –ü–†–û–ë–õ–ï–ú–´ –° –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï–ú:")
        print("‚ùå –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram:")
        print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å BOT_TOKEN")
        print("   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–∫–µ–Ω –∞–∫—Ç–∏–≤–µ–Ω (@BotFather)")
        print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ Replit")
    
    if not any([missing_critical, missing_files, not webhook_ok, not bot_connection_ok]):
        print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!")
        print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã, –ø–æ—á–µ–º—É –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç:")
        print("1. üõå Repl –∑–∞—Å–Ω—É–ª - –Ω–∞–∂–º–∏—Ç–µ Run –µ—â–µ —Ä–∞–∑")
        print("2. üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –±–æ—Ç–∞ (@–∏–º—è_–≤–∞—à–µ–≥–æ_–±–æ—Ç–∞)")
        print("3. üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Repl")
        print("4. üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ Replit")
        print("5. ‚è∞ –í–∫–ª—é—á–∏—Ç–µ Always On –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Replit")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    print("üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TEAM-BOT –ù–ê REPLIT")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    is_replit, missing_files = check_environment()
    missing_critical = check_env_variables()
    data_ok = check_data_file()
    webhook_ok = check_webhook_setup()
    check_replit_files()
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω)
    bot_connection_ok = False
    if not missing_critical or 'BOT_TOKEN' not in missing_critical:
        bot_connection_ok = await test_bot_connection()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    generate_recommendations(missing_critical, missing_files, webhook_ok, bot_connection_ok)
    
    print("\n" + "=" * 60)
    print("üìã –ë–´–°–¢–†–´–ô –ß–ï–ö–õ–ò–°–¢ –î–õ–Ø REPLIT:")
    print("1. ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å BOT_TOKEN –∏ ADMIN_CODE –≤ Secrets")
    print("2. ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å USE_WEBHOOK=true –≤ Secrets")  
    print("3. ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å WEBHOOK_URL=https://–≤–∞—à-repl.repl.co –≤ Secrets")
    print("4. ‚úÖ –ù–∞–∂–∞—Ç—å Run –≤ Replit")
    print("5. ‚úÖ –í–∫–ª—é—á–∏—Ç—å Always On –¥–ª—è 24/7 —Ä–∞–±–æ—Ç—ã")
    print("6. ‚úÖ –ù–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É /start –≤ Telegram")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüî¥ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        import traceback
        traceback.print_exc()
