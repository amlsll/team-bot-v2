#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.
"""

import os
import sys
import asyncio
import logging
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

async def test_basic_bot():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞."""
    print("üß™ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ TEAM-BOT")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    bot_token = os.getenv('BOT_TOKEN')
    if not bot_token:
        print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üí° –î–æ–±–∞–≤—å—Ç–µ BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ Secrets")
        return False
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º aiogram
        from aiogram import Bot
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
        bot = Bot(token=bot_token)
        
        print("üîÑ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        me = await bot.get_me()
        print(f"‚úÖ –ë–æ—Ç –Ω–∞–π–¥–µ–Ω: @{me.username}")
        print(f"   ID: {me.id}")
        print(f"   –ò–º—è: {me.first_name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
        webhook_info = await bot.get_webhook_info()
        print(f"üåê Webhook: {webhook_info.url or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
        await bot.session.close()
        
        print("‚úÖ –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def test_storage():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."""
    print("\nüíæ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –•–†–ê–ù–ï–ù–ò–Ø")
    print("=" * 40)
    
    try:
        from app.services.storage import Storage
        
        storage = Storage()
        data = storage.load()
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:")
        print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {len(data.get('users', {}))}")
        print(f"   –û—á–µ—Ä–µ–¥—å: {len(data.get('queue', []))}")
        print(f"   –ö–æ–º–∞–Ω–¥—ã: {len(data.get('teams', {}))}")
        print(f"   –ê–¥–º–∏–Ω—ã: {len(data.get('admins', {}))}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        return False

async def test_handlers():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
    print("\nüéØ –¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í")
    print("=" * 40)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        from app.bot import bot, dp
        
        print("‚úÖ –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã
        router_count = len(dp.sub_routers)
        print(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ä–æ—É—Ç–µ—Ä–æ–≤: {router_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ /start
        from app.handlers import user_start
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start –Ω–∞–π–¥–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        return False

def print_debug_info():
    """–í—ã–≤–æ–¥–∏—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."""
    print("\nüîç –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø")
    print("=" * 40)
    
    print(f"Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    print(f"–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    important_vars = ['BOT_TOKEN', 'ADMIN_CODE', 'USE_WEBHOOK', 'WEBHOOK_URL']
    for var in important_vars:
        value = os.getenv(var)
        if value:
            if 'TOKEN' in var:
                # –°–∫—Ä—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω
                display = f"{value[:6]}...{value[-4:]}"
            else:
                display = value
            print(f"   {var}: {display}")
        else:
            print(f"   {var}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print_debug_info()
    
    # –¢–µ—Å—Ç—ã
    tests_passed = 0
    total_tests = 3
    
    if await test_basic_bot():
        tests_passed += 1
    
    if await test_storage():
        tests_passed += 1
    
    if await test_handlers():
        tests_passed += 1
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢: {tests_passed}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if tests_passed == total_tests:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å.")
        print("\nüí° –ï—Å–ª–∏ –±–æ—Ç –≤—Å–µ –µ—â–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç:")
        print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Repl –∑–∞–ø—É—â–µ–Ω –∏ –Ω–µ —Å–ø–∏—Ç")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –±–æ—Ç–∞ –≤ Telegram")
        print("3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –µ—â–µ —Ä–∞–∑")
        print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ Replit")
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å")
    
    return tests_passed == total_tests

if __name__ == '__main__':
    try:
        result = asyncio.run(main())
        sys.exit(0 if result else 1)
    except KeyboardInterrupt:
        print("\nüî¥ –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
