#!/usr/bin/env python3
"""
–ù–∞–¥—ë–∂–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º.
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã.
"""

import asyncio
import logging
import sys
import os
import signal
import time
from pathlib import Path
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
logging.basicConfig(
    level=logging.INFO,
    format=log_format,
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('bot_startup.log', encoding='utf-8')
    ]
)

logger = logging.getLogger('bot_startup')

class BotStarter:
    """–ö–ª–∞—Å—Å –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    
    def __init__(self):
        self.max_retries = 5
        self.retry_delay = 5
        self.bot = None
        self.dp = None
        self.should_stop = False
        self.process_lock = None
        
    async def acquire_process_lock(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞."""
        try:
            from app.services.process_lock import ProcessLock
            
            self.process_lock = ProcessLock("team_bot")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ø–µ—Ä–µ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
            running_instances = self.process_lock.get_running_instances()
            if running_instances:
                logger.error("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞:")
                for instance in running_instances:
                    logger.error(f"   PID: {instance['pid']} | –ö–æ–º–∞–Ω–¥–∞: {instance['cmdline']}")
                
                logger.error("\nüîß –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
                logger.error("   python stop_all_bots.py")
                logger.error("   –∏–ª–∏: pkill -f 'team_bot|start_bot|python.*app'")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            if not self.process_lock.acquire(timeout=10):
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–æ—Ü–µ—Å—Å–∞")
                return False
            
            logger.info("‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª—É—á–µ–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
            return False

    async def pre_start_checks(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º."""
        logger.info("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        try:
            import subprocess
            result = subprocess.run([
                sys.executable, 'bot_health_check.py'
            ], capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                logger.info("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logger.error(f"‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∞ –ø—Ä–æ–±–ª–µ–º—ã:\n{result.stdout}\n{result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            logger.warning("‚ö†Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫")
            return True
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É: {e}, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫")
            return True
    
    async def init_bot(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞."""
        try:
            from app.bot import bot, dp
            self.bot = bot
            self.dp = dp
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            me = await self.bot.get_me()
            logger.info(f"‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: @{me.username}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            return False
    
    async def cleanup_webhook(self):
        """–û—á–∏—Å—Ç–∫–∞ webhook –¥–ª—è polling —Ä–µ–∂–∏–º–∞."""
        try:
            webhook_info = await self.bot.get_webhook_info()
            if webhook_info.url:
                logger.info(f"üßπ –û—á–∏—â–∞–µ–º webhook: {webhook_info.url}")
                await self.bot.delete_webhook(drop_pending_updates=True)
                logger.info("‚úÖ Webhook –æ—á–∏—â–µ–Ω")
            else:
                logger.info("‚ÑπÔ∏è Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ webhook: {e}")
    
    def setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤."""
        def signal_handler(signum, frame):
            logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É...")
            self.should_stop = True
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        if hasattr(signal, 'SIGHUP'):
            signal.signal(signal.SIGHUP, signal_handler)
    
    async def start_polling_with_retry(self):
        """–ó–∞–ø—É—Å–∫ polling —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π."""
        retry_count = 0
        
        while retry_count < self.max_retries and not self.should_stop:
            try:
                logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ polling (–ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1}/{self.max_retries})")
                
                # –û—á–∏—â–∞–µ–º webhook –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await self.cleanup_webhook()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º polling
                await self.dp.start_polling(
                    self.bot,
                    handle_signals=False,
                    fast=True,
                    allowed_updates=['message', 'callback_query']
                )
                
                # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç polling –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                logger.info("üì¥ Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                break
                
            except Exception as e:
                retry_count += 1
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ polling (–ø–æ–ø—ã—Ç–∫–∞ {retry_count}): {e}")
                
                if retry_count < self.max_retries:
                    logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {self.retry_delay} —Å–µ–∫ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                    await asyncio.sleep(self.retry_delay)
                    
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
                    self.retry_delay = min(self.retry_delay * 2, 60)
                else:
                    logger.error("üí• –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫")
                    raise
    
    async def graceful_shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã."""
        logger.info("üõë –ù–∞—á–∏–Ω–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É...")
        
        try:
            if self.bot:
                await self.bot.session.close()
                logger.info("‚úÖ –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
        
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–æ—Ü–µ—Å—Å–∞
        try:
            if self.process_lock:
                self.process_lock.release()
                logger.info("‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
        
        logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    async def run(self):
        """–ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞."""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
            self.setup_signal_handlers()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ (–ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º)
            if not await self.acquire_process_lock():
                logger.error("üí• –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–æ—Ü–µ—Å—Å–∞")
                return False
            
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            if not await self.pre_start_checks():
                logger.error("üí• –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
                return False
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
            if not await self.init_bot():
                logger.error("üí• –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞")
                return False
            
            # –ó–∞–ø—É—Å–∫ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–≤—Ç–æ—Ä–∞–º–∏
            await self.start_polling_with_retry()
            
            return True
            
        except KeyboardInterrupt:
            logger.info("‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
        finally:
            await self.graceful_shutdown()
        
        return True

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞."""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    logger.info("=" * 60)
    logger.info("ü§ñ –ó–ê–ü–£–°–ö TEAM-BOT")
    logger.info("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not os.getenv('BOT_TOKEN'):
        logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        logger.error("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ env.sample")
        return 1
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º starter
    starter = BotStarter()
    success = await starter.run()
    
    logger.info("=" * 60)
    if success:
        logger.info("‚úÖ TEAM-BOT –ó–ê–í–ï–†–®–ò–õ –†–ê–ë–û–¢–£ –ö–û–†–†–ï–ö–¢–ù–û")
    else:
        logger.error("‚ùå TEAM-BOT –ó–ê–í–ï–†–®–ò–õ –†–ê–ë–û–¢–£ –° –û–®–ò–ë–ö–ê–ú–ò")
    logger.info("=" * 60)
    
    return 0 if success else 1

if __name__ == '__main__':
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        sys.exit(0)
