#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ team-bot.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.
"""

import os
import sys
import asyncio
import logging
import argparse
from pathlib import Path
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
logging.basicConfig(
    level=logging.INFO,
    format=log_format,
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('bot_startup.log', encoding='utf-8')
    ]
)

logger = logging.getLogger('run_bot')


class SafeBotRunner:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤."""
    
    def __init__(self):
        self.force_start = False
        self.skip_checks = False
        self.process_lock = None
    
    def check_dependencies(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""
        logger.info("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        required_modules = ['aiogram', 'aiohttp', 'psutil', 'python-dotenv']
        missing_modules = []
        
        for module in required_modules:
            try:
                if module == 'python-dotenv':
                    __import__('dotenv')
                else:
                    __import__(module)
                logger.debug(f"‚úÖ {module}: –Ω–∞–π–¥–µ–Ω")
            except ImportError:
                missing_modules.append(module)
                logger.error(f"‚ùå {module}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        if missing_modules:
            logger.error("\nüí° –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
            logger.error(f"   pip install {' '.join(missing_modules)}")
            return False
        
        logger.info("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    
    def check_configuration(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        logger.info("‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
        env_file = Path('.env')
        if not env_file.exists():
            logger.error("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
            logger.error("üí° –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ env.sample:")
            logger.error("   cp env.sample .env")
            logger.error("   # –ó–∞—Ç–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª")
            return False
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        load_dotenv()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        bot_token = os.getenv('BOT_TOKEN')
        if not bot_token:
            logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
            logger.error("üí° –î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª:")
            logger.error("   BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–æ—Ç_BotFather")
            return False
        
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
        if not bot_token.count(':') == 1 or len(bot_token.split(':')[0]) < 8:
            logger.error("‚ùå BOT_TOKEN –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            logger.error("üí° –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 123456789:AAA-BBB-CCC")
            return False
        
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
    
    async def check_existing_processes(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤."""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
        
        try:
            from app.services.process_lock import check_running_instances
            
            running_instances = check_running_instances()
            
            if running_instances:
                logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(running_instances)} –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞:")
                for instance in running_instances:
                    logger.warning(f"   PID: {instance['pid']} | –ö–æ–º–∞–Ω–¥–∞: {instance['cmdline']}")
                
                if self.force_start:
                    logger.info("üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫: –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã...")
                    from app.services.process_lock import stop_all_instances
                    stopped = stop_all_instances(force=True)
                    logger.info(f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {stopped} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
                    return True
                else:
                    logger.error("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã!")
                    logger.error("üîß –í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏—è:")
                    logger.error("   1. python stop_all_bots.py  # –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ")
                    logger.error("   2. python run_bot.py --force  # –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫")
                    logger.error("   3. pkill -f 'team_bot|start_bot'  # –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
                    return False
            
            logger.info("‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return True
            
        except ImportError:
            logger.warning("‚ö†Ô∏è –ú–æ–¥—É–ª—å process_lock –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
            return not self.skip_checks
    
    async def run_health_check(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
        if self.skip_checks:
            logger.info("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º health check –ø–æ –∑–∞–ø—Ä–æ—Å—É")
            return True
        
        logger.info("üè• –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...")
        
        try:
            import subprocess
            result = subprocess.run([
                sys.executable, 'bot_health_check.py'
            ], capture_output=True, text=True, timeout=60)
            
            if result.returncode == 0:
                logger.info("‚úÖ Health check –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logger.error("‚ùå Health check –≤—ã—è–≤–∏–ª –ø—Ä–æ–±–ª–µ–º—ã:")
                # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –≤—ã–≤–æ–¥–∞
                for line in result.stdout.split('\n'):
                    if '‚ùå' in line or 'ERROR' in line:
                        logger.error(f"   {line}")
                return False
                
        except subprocess.TimeoutExpired:
            logger.warning("‚ö†Ô∏è Health check –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
            return True
        except FileNotFoundError:
            logger.warning("‚ö†Ô∏è bot_health_check.py –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ health check: {e}")
            return not self.skip_checks
    
    async def start_bot(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ team-bot...")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å—Ç–∞—Ä—Ç–µ—Ä
            from start_bot import main as start_main
            
            result = await start_main()
            return result == 0
            
        except ImportError:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å start_bot")
            logger.error("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª start_bot.py —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
            return False
    
    async def run(self, force: bool = False, skip_checks: bool = False) -> bool:
        """–ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞."""
        self.force_start = force
        self.skip_checks = skip_checks
        
        logger.info("=" * 60)
        logger.info("ü§ñ TEAM-BOT SAFE RUNNER")
        logger.info("=" * 60)
        
        # –≠—Ç–∞–ø 1: –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if not self.check_dependencies():
            return False
        
        if not self.check_configuration():
            return False
        
        # –≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        if not await self.check_existing_processes():
            return False
        
        # –≠—Ç–∞–ø 3: Health check
        if not await self.run_health_check():
            logger.warning("‚ö†Ô∏è Health check –Ω–µ –ø—Ä–æ–π–¥–µ–Ω, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫...")
        
        # –≠—Ç–∞–ø 4: –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("üéØ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
        return await self.start_bot()


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞."""
    parser = argparse.ArgumentParser(
        description="–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ team-bot —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"
    )
    parser.add_argument(
        '--force', '-f',
        action='store_true',
        help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤'
    )
    parser.add_argument(
        '--skip-checks',
        action='store_true',
        help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å health check (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)'
    )
    parser.add_argument(
        '--debug',
        action='store_true',
        help='–í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥'
    )
    
    args = parser.parse_args()
    
    if args.debug:
        logging.getLogger().setLevel(logging.DEBUG)
    
    try:
        runner = SafeBotRunner()
        success = asyncio.run(runner.run(
            force=args.force,
            skip_checks=args.skip_checks
        ))
        
        logger.info("=" * 60)
        if success:
            logger.info("‚úÖ TEAM-BOT –ó–ê–í–ï–†–®–ò–õ –†–ê–ë–û–¢–£ –ö–û–†–†–ï–ö–¢–ù–û")
        else:
            logger.error("‚ùå TEAM-BOT –ó–ê–í–ï–†–®–ò–õ –†–ê–ë–û–¢–£ –° –û–®–ò–ë–ö–ê–ú–ò")
        logger.info("=" * 60)
        
        return 0 if success else 1
        
    except KeyboardInterrupt:
        logger.info("\n‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
        return 0
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1


if __name__ == '__main__':
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        sys.exit(0)
